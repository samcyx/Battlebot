/*
 * Copyright (c) 2024 EdgeImpulse Inc.
 *
 * Generated by Edge Impulse and licensed under the applicable Edge Impulse
 * Terms of Service. Community and Professional Terms of Service
 * (https://docs.edgeimpulse.com/page/terms-of-service) or Enterprise Terms of
 * Service (https://docs.edgeimpulse.com/page/enterprise-terms-of-service),
 * according to your product plan subscription (the “License”).
 *
 * This software, documentation and other associated files (collectively referred
 * to as the “Software”) is a single SDK variation generated by the Edge Impulse
 * platform and requires an active paid Edge Impulse subscription to use this
 * Software for any purpose.
 *
 * You may NOT use this Software unless you have an active Edge Impulse subscription
 * that meets the eligibility requirements for the applicable License, subject to
 * your full and continued compliance with the terms and conditions of the License,
 * including without limitation any usage restrictions under the applicable License.
 *
 * If you do not have an active Edge Impulse product plan subscription, or if use
 * of this Software exceeds the usage limitations of your Edge Impulse product plan
 * subscription, you are not permitted to use this Software and must immediately
 * delete and erase all copies of this Software within your control or possession.
 * Edge Impulse reserves all rights and remedies available to enforce its rights.
 *
 * Unless required by applicable law or agreed to in writing, the Software is
 * distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND,
 * either express or implied. See the License for the specific language governing
 * permissions, disclaimers and limitations under the License.
 */
// Generated on: 26.10.2024 21:15:06

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined (__GNUC__)  /* GNU compiler */
#define ALIGN(X) __attribute__((aligned(X)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (_MSC_VER)
#define ALIGN(X) __declspec(align(X))
#elif defined (__TASKING__) /* TASKING Compiler */
#define ALIGN(X) __align(X)
#define DEFINE_SECTION(x) __attribute__(section(x)))
#elif defined (__ARMCC_VERSION) /* Arm Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__ICCARM__) /* IAR Compiler */
#define ALIGN(x) __attribute__((aligned(x)))
#define DEFINE_SECTION(x) __attribute__((section(x)))
#elif defined (__clang__) /* LLVM/Clang Compiler */
#define ALIGN(X) __ALIGNED(x)
#define DEFINE_SECTION(x) __attribute__((section(x)))
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#ifndef CONFIG_IDF_TARGET_ESP32S3
#define EI_MAX_SCRATCH_BUFFER_COUNT 14
#else
#define EI_MAX_SCRATCH_BUFFER_COUNT 28
#endif // CONFIG_IDF_TARGET_ESP32S3
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX) || defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
constexpr int kTensorArenaSize = 102080;
#else
constexpr int kTensorArenaSize = 101056;
#endif

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
#if defined (EI_TENSOR_ARENA_LOCATION)
#define STRINGIZE(x) #x
#define STRINGIZE_VALUE_OF(x) STRINGIZE(x)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) DEFINE_SECTION(STRINGIZE_VALUE_OF(EI_TENSOR_ARENA_LOCATION));
#else
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#endif
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};

enum used_operators_e {
  OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_ADD, OP_PAD, OP_SOFTMAX,  OP_LAST
};

struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};

typedef struct {
  TfLiteTensor tensor;
  int16_t index;
} TfLiteTensorWithIndex;

typedef struct {
  TfLiteEvalTensor tensor;
  int16_t index;
} TfLiteEvalTensorWithIndex;

TfLiteContext ctx{};
static const int MAX_TFL_TENSOR_COUNT = 4;
static TfLiteTensorWithIndex tflTensors[MAX_TFL_TENSOR_COUNT];
static const int MAX_TFL_EVAL_COUNT = 4;
static TfLiteEvalTensorWithIndex tflEvalTensors[MAX_TFL_EVAL_COUNT];
TfLiteRegistration registrations[OP_LAST];

namespace g0 {
const TfArray<4, int> tensor_dimension0 = { 4, { 1,60,60,3 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0039215688593685627, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(16) int32_t tensor_data1[4*2] = { 
  0, 0, 
  0, 1, 
  0, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension1 = { 2, { 4,2 } };
const ALIGN(16) int32_t tensor_data2[4*2] = { 
  0, 0, 
  1, 1, 
  1, 1, 
  0, 0, 
};
const TfArray<2, int> tensor_dimension2 = { 2, { 4,2 } };
const ALIGN(8) int32_t tensor_data3[2] = { 26150, -23939, };
const TfArray<1, int> tensor_dimension3 = { 1, { 2 } };
const TfArray<2, float> quant3_scale = { 2, { 0.00017320302140433341, 0.00018316616478841752, } };
const TfArray<2, int> quant3_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(16) int8_t tensor_data4[2*1*1*32] = { 
  /* [0][0][][] */ 64,-47,-58,71,-73,-16,-59,28,88,-30,-45,-36,5,36,-59,2,101,-89,9,-69,104,30,38,-67,-17,-54,-53,127,10,-64,83,39, 
  /* [1][0][][] */ 26,56,56,-39,-43,55,8,6,-18,-5,15,81,78,34,21,8,-23,9,-41,-61,-52,31,23,82,56,54,-25,-44,68,-72,-127,-4, 
};
const TfArray<4, int> tensor_dimension4 = { 4, { 2,1,1,32 } };
const TfArray<2, float> quant4_scale = { 2, { 0.0047229165211319923, 0.0049945926293730736, } };
const TfArray<2, int> quant4_zero = { 2, { 0,0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int32_t tensor_data5[32] = { -1631, 356, 346, -1088, -1491, 164, -987, 365, -942, -950, -76, 430, 331, 447, 199, -2124, -1123, -866, -563, -987, -880, 449, 316, 381, -114, 338, -1253, 3282, -1060, -960, 2099, -1518, };
const TfArray<1, int> tensor_dimension5 = { 1, { 32 } };
const TfArray<32, float> quant5_scale = { 32, { 4.3650488805724308e-05, 4.2360687075415626e-05, 4.5431967009790242e-05, 4.1052826418308541e-05, 4.2782819946296513e-05, 4.6129520342219621e-05, 5.2953717386117205e-05, 4.1713989048730582e-05, 4.1854411392705515e-05, 4.1874620364978909e-05, 5.2847673941869289e-05, 4.4294079998508096e-05, 4.0427723433822393e-05, 4.1943290852941573e-05, 5.0657599786063656e-05, 4.3385134631535038e-05, 3.7928912206552923e-05, 6.1586521042045206e-05, 4.4214746594661847e-05, 4.0029255615081638e-05, 3.8400234188884497e-05, 4.0286220610141754e-05, 5.4696494771633297e-05, 4.6098080929368734e-05, 4.9112139095086604e-05, 5.1237289881100878e-05, 4.4082578824600205e-05, 6.2016384617891163e-05, 4.01163415517658e-05, 3.7012090615462512e-05, 6.4845953602343798e-05, 4.0741913835518062e-05, } };
const TfArray<32, int> quant5_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[32*1*1*48] = { 
  /* [0][0][][] */ -58,-74,92,-7,57,-40,-105,-121,26,-115,-127,-22,22,-21,-63,21,-51,-31,-88,-70,-84,-123,-25,69,-106,-17,40,-68,72,-32,-48,-93,46,-86,-114,29,-119,-102,-96,-4,39,-107,-91,62,17,-104,68,-47, 
  /* [1][0][][] */ -31,-13,-61,2,-27,83,62,13,81,-87,-120,127,69,-65,-19,67,97,-31,45,127,-33,-24,46,24,44,8,-96,93,22,-41,112,-67,64,95,-22,0,55,59,-4,-44,-49,16,-31,-85,-31,48,-33,-46, 
  /* [2][0][][] */ 62,-14,-48,84,-10,-52,102,86,-78,83,-31,127,87,-41,28,-105,-54,-18,45,62,-74,-32,109,20,-10,60,29,1,-49,12,91,77,-52,-17,-88,-117,-70,90,99,-4,-87,-57,1,6,-70,114,-24,-62, 
  /* [3][0][][] */ 53,-3,22,-38,-85,34,-127,22,34,4,55,-16,72,96,61,-8,87,79,-69,-5,94,-101,-83,-126,-37,-122,-26,90,24,-106,66,-6,-71,-49,-27,-28,-105,-42,23,31,-41,-106,-103,-18,54,12,-63,-99, 
  /* [4][0][][] */ 22,116,-23,26,-49,-36,5,-9,33,59,-21,21,1,1,-17,-73,-43,-26,-83,-12,75,-104,54,2,-33,-16,109,-72,-69,33,-84,-69,41,85,-7,-107,-69,-28,-127,24,-69,-82,-83,-107,7,75,13,28, 
  /* [5][0][][] */ 92,-113,67,71,39,-127,37,47,92,-95,-16,-37,25,51,-8,-1,42,47,-53,95,33,22,23,-29,-88,-70,-56,-89,50,-27,21,-98,-29,-5,-74,-19,-96,-39,44,32,-81,-39,28,81,-30,29,26,-42, 
  /* [6][0][][] */ 33,-30,63,42,-59,-52,14,35,24,-71,35,-64,64,54,69,-100,-10,3,-2,71,-65,-127,85,39,-52,-57,-40,-55,-25,-109,70,-63,-67,-101,-51,-93,-22,81,-94,127,51,34,23,1,-102,63,-59,-50, 
  /* [7][0][][] */ 122,33,-29,-37,-63,115,-15,5,105,12,-115,33,55,-127,15,73,52,17,2,117,58,20,-1,79,-53,79,-4,49,-68,69,-25,30,27,23,51,70,-93,69,0,-26,99,-66,66,56,51,12,92,-100, 
  /* [8][0][][] */ -13,86,-58,-101,39,14,-95,-35,-7,17,93,63,-14,7,-50,-78,-76,75,-78,-6,10,-18,59,94,-127,105,108,67,-83,59,-102,102,72,-41,45,23,93,-2,-36,48,59,79,-102,-120,-23,-47,-28,87, 
  /* [9][0][][] */ -14,0,93,28,62,-113,-62,-127,28,31,-20,35,-41,-74,-109,-36,-7,-9,-109,-81,-11,85,-118,-115,91,24,26,10,-26,-67,-100,81,43,-14,14,-25,-88,2,-49,-56,29,-80,40,-104,60,4,-115,34, 
  /* [10][0][][] */ -37,28,69,-55,-12,85,89,19,22,24,-8,-36,73,26,-57,13,-38,60,-74,-43,-13,-2,44,-62,34,27,-127,-108,-38,33,-74,-66,60,68,67,28,-32,-5,-30,31,-29,88,-105,-37,-78,-41,-24,-52, 
  /* [11][0][][] */ 121,-34,-6,98,115,48,73,33,105,92,-83,127,3,-113,-15,-52,-52,-84,69,52,40,50,34,-97,-82,-93,-74,59,83,-51,41,-20,-71,-64,35,16,-49,69,-16,-36,-12,103,-76,10,-34,-39,-84,-74, 
  /* [12][0][][] */ 36,19,-49,3,94,-4,-9,38,-73,67,-24,43,-35,-28,-8,-101,-106,-30,-36,-64,37,-29,30,96,-53,-67,38,-107,103,-42,-16,107,-80,-72,-56,-11,3,-72,-10,58,124,49,-127,-32,-18,-70,-43,120, 
  /* [13][0][][] */ 124,-99,105,97,98,116,95,67,71,-87,-7,0,94,26,25,-39,-109,-60,-55,42,76,-43,122,-43,-47,28,-50,15,-71,-127,88,33,46,99,-31,9,-71,-32,34,77,-48,83,-60,12,-37,43,-6,-22, 
  /* [14][0][][] */ -29,-112,71,55,66,-32,5,-87,-61,-23,48,85,-17,-91,-100,-88,-50,-57,20,30,-29,13,8,47,-85,-77,-64,19,-80,-127,-51,26,85,-21,-32,-19,79,88,29,-85,5,-81,20,72,54,-83,45,-63, 
  /* [15][0][][] */ -29,-53,-53,30,48,-95,6,-120,10,-35,-107,-28,52,-14,-107,-117,55,-34,-122,-22,6,-29,18,69,58,17,42,64,-28,18,9,-127,-27,-17,-102,-49,-94,51,72,-97,-6,63,-91,-70,-11,-95,-79,-108, 
  /* [16][0][][] */ -98,48,91,-80,24,108,-82,25,40,30,-67,48,-34,2,-27,-70,106,74,58,45,96,92,-61,40,-52,93,-8,64,-125,51,29,5,-127,71,63,95,-54,59,-72,-88,8,-68,84,93,51,87,99,-31, 
  /* [17][0][][] */ 57,-96,-5,39,-22,-69,2,-79,75,-59,76,66,73,50,-127,30,-31,34,84,91,-58,-51,26,-32,-16,34,-84,-18,77,-87,28,29,-8,-48,2,-30,-47,104,-71,37,-81,-25,-8,27,-18,-7,54,-86, 
  /* [18][0][][] */ -98,127,87,-69,-17,-104,-103,-4,-13,56,-84,-57,-41,50,67,-55,14,-26,40,-33,79,-9,8,-83,12,-48,60,96,18,72,-6,34,30,-31,-85,-28,-37,28,-42,45,-50,-10,-33,-3,-109,3,14,-13, 
  /* [19][0][][] */ 6,66,61,22,44,-93,93,77,95,-76,81,-26,-104,85,-55,51,60,-114,106,39,-37,98,-51,19,64,-62,82,-82,-102,-103,-13,33,70,-86,69,33,-6,-33,-71,-100,47,-127,-90,63,-88,14,87,-97, 
  /* [20][0][][] */ -28,127,61,85,-101,81,3,47,-2,0,-78,-18,-20,115,65,-87,-59,-50,-83,-51,9,-49,-94,-86,65,-69,-15,47,10,45,-58,111,88,37,-20,54,31,-45,-31,-125,-101,-49,-78,-112,-39,-80,-83,94, 
  /* [21][0][][] */ 111,30,77,-97,103,-66,90,22,4,-56,-64,67,11,28,-94,-83,-102,-27,43,0,114,-61,80,-76,68,-91,-105,65,25,-51,7,-26,14,23,-90,-127,114,98,-105,-17,13,15,16,-6,-91,-67,-77,97, 
  /* [22][0][][] */ 38,-69,-47,-67,71,-41,88,46,-66,70,-54,-58,88,-105,-113,-73,28,65,-72,-34,72,-61,31,28,77,-15,-127,72,-35,-92,-39,-82,41,46,13,-5,8,-11,-35,-73,15,-2,-5,73,45,-73,69,-10, 
  /* [23][0][][] */ 75,-119,9,52,91,-106,28,-83,52,-62,61,89,23,-127,-25,-53,72,-24,-80,100,89,-89,100,-29,-3,-27,18,12,71,-10,79,-38,-27,35,6,2,89,-4,-88,21,-81,9,-2,-88,-58,-66,94,28, 
  /* [24][0][][] */ -62,-75,-84,-58,-71,-125,-65,-77,43,95,26,49,90,13,-59,-127,-69,19,18,-39,79,-95,-51,-34,46,-59,18,42,83,-1,-20,-72,-4,-2,16,-15,-44,-110,53,-17,-61,-81,70,-20,11,-23,29,58, 
  /* [25][0][][] */ -47,-80,-56,-4,79,-62,-56,45,39,-79,-40,41,63,-34,-121,-34,-59,51,36,-71,62,48,2,-44,21,-53,-127,25,70,-113,49,86,78,-87,23,32,81,-44,-10,1,-57,83,-89,9,78,43,47,32, 
  /* [26][0][][] */ 28,-102,-37,-30,-106,-11,-30,-30,-111,-127,95,57,-92,-40,51,15,84,14,-57,-78,-6,49,67,-3,33,75,34,31,-11,14,-107,-17,-40,-62,-104,-106,-77,57,-63,88,-108,73,31,6,-82,50,-54,74, 
  /* [27][0][][] */ 20,64,20,-15,-34,-1,-43,50,48,114,40,-67,16,60,121,17,110,18,66,-31,-23,71,11,40,-3,49,-12,59,70,89,-19,49,82,108,-6,-8,0,-26,-20,61,-9,56,45,28,127,60,89,126, 
  /* [28][0][][] */ 73,-3,70,25,-127,-75,-104,-93,-53,-124,52,52,-92,-84,-9,90,76,97,-75,53,-45,5,-122,-75,-117,68,-83,-77,-86,-82,-6,-31,-118,5,62,55,-1,-119,-60,22,85,24,-107,41,-123,-28,-4,28, 
  /* [29][0][][] */ 36,92,45,-70,-105,3,-105,-6,111,-31,-55,-118,105,-56,-46,-57,-118,91,40,-85,-96,-24,50,12,-52,26,11,-40,-123,6,127,-18,49,-4,-59,-33,-27,120,-22,94,51,99,-53,112,-6,99,-40,-32, 
  /* [30][0][][] */ 47,11,-9,46,-41,66,-32,32,94,14,46,-41,-45,36,122,47,34,59,94,-54,38,14,-41,44,4,46,18,116,6,24,-47,71,-28,19,-33,16,38,12,14,38,77,-17,38,98,127,-20,88,86, 
  /* [31][0][][] */ 54,-93,16,76,26,47,-81,-119,-53,-42,-89,-110,73,-118,-55,95,-76,-105,13,24,39,13,-54,81,29,-123,75,23,-93,-80,22,88,-3,1,-112,-26,72,-55,-88,-127,37,-90,-45,8,-18,-73,-61,1, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 32,1,1,48 } };
const TfArray<32, float> quant6_scale = { 32, { 0.0025509498082101345, 0.0024755732156336308, 0.0026550600305199623, 0.0023991414345800877, 0.0025002430193126202, 0.0026958251837641001, 0.0030946338083595037, 0.0024377801455557346, 0.0024459864944219589, 0.0024471674114465714, 0.0030884365551173687, 0.0025885615032166243, 0.0023626103065907955, 0.0024511804804205894, 0.0029604476876556873, 0.0025354423560202122, 0.0022165789268910885, 0.0035991377662867308, 0.0025839251466095448, 0.0023393237497657537, 0.0022441230248659849, 0.002354340860620141, 0.0031964823137968779, 0.0026939879171550274, 0.0028701305855065584, 0.0029943250119686127, 0.0025762012228369713, 0.003624259028583765, 0.00234441296197474, 0.0021629994735121727, 0.00378962024115026, 0.0023809715639799833, } };
const TfArray<32, int> quant6_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int32_t tensor_data7[48] = { -473, 1415, 2673, 5461, 7333, -1330, -1646, 26605, 1547, 11513, 713, -1593, 5967, -4821, 7977, -1883, -577, -6623, 781, 2168, 3536, 5446, 4663, 624, -4645, -1749, 2033, 2744, 2489, 8469, -1354, 3622, 5958, 4267, 4300, 2514, 14068, 1833, 1258, -1324, 784, 16923, -272, 1611, 9636, -142, 2291, 6537, };
const TfArray<1, int> tensor_dimension7 = { 1, { 48 } };
const TfArray<48, float> quant7_scale = { 48, { 0.00019668183813337237, 0.00031312552164308727, 8.9618508354760706e-05, 0.00010776638373499736, 0.00012750878522638232, 0.00012884302122984082, 0.00021402593120001256, 3.4856951970141381e-05, 0.00016276037786155939, 6.7031447542831302e-05, 0.00017354990995954722, 0.00022652090410701931, 0.00010553301399340853, 0.00013986411795485765, 0.00010793103137984872, 0.0001145037604146637, 9.9067707196809351e-05, 2.947719804069493e-05, 0.00024583440972492099, 0.00023587018949910998, 0.0001653154322411865, 9.8407166660763323e-05, 0.00013587324065156281, 0.00011905563587788492, 0.00011600943253142759, 0.00021936529083177447, 0.00014158977137412876, 0.00018755388737190515, 0.00013502717774827033, 9.7191659733653069e-05, 0.00011322565114824101, 0.00016059281188063323, 0.00010564228432485834, 0.00016130197036545724, 7.75255321059376e-05, 9.3737653514835984e-05, 6.1259153881110251e-05, 0.00011438770161475986, 0.00011179860302945599, 0.00021595669386442751, 0.00014288135571405292, 5.7081699196714908e-05, 0.00016858920571394265, 0.00013746220793109387, 8.4581173723563552e-05, 0.0001549354346934706, 0.00011883803381351754, 0.00011367428669473156, } };
const TfArray<48, int> quant7_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int8_t tensor_data8[48*1*1*8] = { 
  /* [0][0][][] */ 37,-38,-85,27,-127,1,-76,6, 
  /* [1][0][][] */ -127,24,86,22,-102,-39,-7,28, 
  /* [2][0][][] */ -8,100,-22,28,-65,-127,-3,97, 
  /* [3][0][][] */ -67,23,-22,127,13,-67,-79,-34, 
  /* [4][0][][] */ 26,-21,30,-110,-14,15,-127,18, 
  /* [5][0][][] */ 47,127,-54,-44,-29,-14,39,-107, 
  /* [6][0][][] */ 72,-46,40,98,-32,-127,-9,-84, 
  /* [7][0][][] */ 38,90,-54,-52,-58,-18,18,-127, 
  /* [8][0][][] */ 3,-33,50,-3,15,11,-48,-127, 
  /* [9][0][][] */ -100,16,-101,22,-127,-76,-75,-8, 
  /* [10][0][][] */ 85,13,104,-49,-127,15,102,102, 
  /* [11][0][][] */ 127,-44,-77,-1,42,-3,-73,-22, 
  /* [12][0][][] */ -10,-127,126,19,29,4,-87,72, 
  /* [13][0][][] */ 17,-43,80,-27,24,-106,61,-127, 
  /* [14][0][][] */ -127,56,83,10,1,-96,30,-30, 
  /* [15][0][][] */ 31,127,-29,-64,-71,10,40,-118, 
  /* [16][0][][] */ 19,108,-41,67,-6,-32,-7,127, 
  /* [17][0][][] */ 18,107,-10,101,-51,97,-127,60, 
  /* [18][0][][] */ 45,-17,127,-55,80,-74,34,-44, 
  /* [19][0][][] */ 31,-27,10,116,16,-56,-48,-127, 
  /* [20][0][][] */ 10,17,-26,47,-14,57,-127,8, 
  /* [21][0][][] */ 17,-9,38,27,30,127,39,-55, 
  /* [22][0][][] */ 69,-127,-20,55,-63,50,9,24, 
  /* [23][0][][] */ -53,-95,5,-114,-9,-56,7,-127, 
  /* [24][0][][] */ 10,31,-14,-58,-30,-127,-34,54, 
  /* [25][0][][] */ 58,84,127,11,7,27,-48,-2, 
  /* [26][0][][] */ -105,-6,127,-86,-101,-28,73,-16, 
  /* [27][0][][] */ -77,50,-45,-99,38,127,-26,89, 
  /* [28][0][][] */ 26,-121,61,55,49,2,-42,127, 
  /* [29][0][][] */ -86,47,45,-45,-127,-3,75,-49, 
  /* [30][0][][] */ 127,-120,5,82,-127,-32,35,-91, 
  /* [31][0][][] */ 48,72,55,-31,-104,-15,17,127, 
  /* [32][0][][] */ -66,-10,113,-58,23,22,-110,-127, 
  /* [33][0][][] */ 43,51,112,-127,27,51,-25,69, 
  /* [34][0][][] */ -22,-100,84,-40,32,127,76,-89, 
  /* [35][0][][] */ 50,6,76,9,16,127,17,-53, 
  /* [36][0][][] */ -3,14,-29,35,40,-127,-5,21, 
  /* [37][0][][] */ 29,-28,59,21,-124,127,-35,-27, 
  /* [38][0][][] */ -117,-25,-127,-38,118,-47,-125,-38, 
  /* [39][0][][] */ 1,4,41,-127,-34,55,-107,2, 
  /* [40][0][][] */ 80,-24,-62,-127,55,66,67,-29, 
  /* [41][0][][] */ 38,-32,-22,127,-93,-2,-97,-55, 
  /* [42][0][][] */ -97,41,66,127,-54,-63,-56,2, 
  /* [43][0][][] */ 47,-76,102,19,-73,38,127,43, 
  /* [44][0][][] */ -4,-24,38,-60,-7,127,50,28, 
  /* [45][0][][] */ -42,44,-33,8,81,-44,-127,-36, 
  /* [46][0][][] */ -97,-87,-15,-21,33,127,-38,-115, 
  /* [47][0][][] */ -120,-69,-32,23,15,127,-6,-51, 
};
const TfArray<4, int> tensor_dimension8 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant8_scale = { 48, { 0.0029953941702842712, 0.0047687897458672523, 0.0013648578897118568, 0.0016412434633821249, 0.0019419132731854916, 0.0019622331019490957, 0.0032595384400337934, 0.00053085893159732223, 0.002478782320395112, 0.0010208649327978492, 0.0026431030128151178, 0.003449832322075963, 0.0016072300495579839, 0.0021300804801285267, 0.0016437510494142771, 0.0017438513459637761, 0.0015087657375261188, 0.00044892719597555697, 0.003743970301002264, 0.0035922187380492687, 0.002517694840207696, 0.0014987059403210878, 0.0020693009719252586, 0.0018131748074665666, 0.0017667821375653148, 0.0033408550079911947, 0.0021563617046922445, 0.0028563786763697863, 0.0020564156584441662, 0.0014801942743360996, 0.0017243862384930253, 0.0024457711260765791, 0.0016088942065834999, 0.0024565714411437511, 0.0011806861730292439, 0.0014275909634307027, 0.00093295506667345762, 0.0017420838121324778, 0.0017026527784764767, 0.0032889433205127716, 0.0021760319359600544, 0.00086933386046439409, 0.0025675534270703793, 0.0020935002248734236, 0.0012881410075351596, 0.00235961121506989, 0.0018098608125001192, 0.0017312187701463699, } };
const TfArray<48, int> quant8_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(16) int32_t tensor_data9[8] = { -6473, 2585, -14201, 10153, 8187, -3389, 10810, 5113, };
const TfArray<1, int> tensor_dimension9 = { 1, { 8 } };
const TfArray<8, float> quant9_scale = { 8, { 8.1550570030231029e-05, 0.00015191802231129259, 4.2737570765893906e-05, 6.7787856096401811e-05, 0.00010012952407123521, 7.3126160714309663e-05, 0.00012244694516994059, 0.00014727754751220345, } };
const TfArray<8, int> quant9_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(16) int8_t tensor_data10[8*1*1*48] = { 
  /* [0][0][][] */ 23,50,34,26,1,-19,64,33,-15,22,-12,-20,64,-24,39,-19,-55,-25,-127,10,45,-18,20,27,18,-4,42,-6,-10,-42,22,41,-38,59,46,-6,51,89,-67,-37,27,46,-115,-56,36,42,-24,-67, 
  /* [1][0][][] */ -24,-58,-4,78,-35,3,-17,-11,30,16,-19,-44,-21,-10,28,9,51,23,63,-58,6,30,28,-33,2,-18,-27,-28,-34,-4,-33,-11,-43,-39,-105,86,23,11,-127,-37,5,-36,91,38,110,-37,-44,59, 
  /* [2][0][][] */ -5,0,46,-34,-17,-32,-22,127,-25,66,-47,-13,103,-16,53,-26,-47,-56,-2,31,-18,-30,27,8,-4,43,-5,31,7,16,82,24,-63,-13,26,61,-7,63,62,-110,23,20,-33,-30,19,22,11,-15, 
  /* [3][0][][] */ 32,6,-127,-21,26,-10,68,-29,-33,-31,-3,8,-31,-51,36,11,9,53,3,48,-58,19,-61,-20,-43,-65,30,1,-77,-46,-51,33,89,52,-50,9,-52,11,18,-4,46,-51,-32,9,49,-34,43,-25, 
  /* [4][0][][] */ 0,42,-12,3,13,5,-79,-109,-37,31,-19,90,4,-22,2,66,47,53,-78,2,37,16,-23,-9,49,0,19,-7,-16,-1,-5,-27,16,-30,-127,40,-22,-4,38,34,-23,-37,78,48,14,-59,14,19, 
  /* [5][0][][] */ -49,-28,93,19,84,25,56,-3,-127,-5,-99,-2,-84,-91,48,68,-25,28,15,9,54,28,15,24,-30,-11,12,-27,-45,6,-24,-35,-42,45,56,15,-8,75,-30,9,47,-49,-64,47,-23,10,37,20, 
  /* [6][0][][] */ 79,54,-16,29,19,-30,-119,-54,8,7,-3,82,-36,-27,6,34,-38,30,40,-18,124,-38,66,127,8,-55,18,-27,-50,-29,-43,-69,41,-41,27,-2,-7,23,-30,22,-75,-67,-57,-31,-20,-63,45,4, 
  /* [7][0][][] */ 5,37,50,-81,56,-34,-40,-8,14,1,19,38,-49,-21,37,11,-24,26,-15,39,-49,-1,-17,78,0,-58,-3,38,-21,30,-54,-17,35,-15,-27,-30,-72,4,127,-12,5,-47,-7,-13,29,-18,67,-2, 
};
const TfArray<4, int> tensor_dimension10 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant10_scale = { 8, { 0.0039832894690334797, 0.0074203461408615112, 0.0020874915644526482, 0.0033110580407083035, 0.0048907678574323654, 0.0035718041472136974, 0.0059808488003909588, 0.0071936855092644691, } };
const TfArray<8, int> quant10_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(16) int32_t tensor_data11[48] = { -595, -6306, 3040, 247, -27, -1156, 1309, 11284, -2958, 7186, 12024, -4165, 6910, 117, 7121, -678, 1633, 282, 4160, -2784, -2850, -1323, -16354, -2939, 10079, -1946, -1409, 3485, 5833, 3093, 7337, -4878, -16081, 171, -2519, -3637, 4880, 5990, -879, 11620, 3834, 1352, -6300, -4420, -5450, 11271, -182, 3587, };
const TfArray<1, int> tensor_dimension11 = { 1, { 48 } };
const TfArray<48, float> quant11_scale = { 48, { 6.8464709329418838e-05, 0.00015467236516997218, 0.00019188328587915748, 0.0002024129789788276, 0.00018806186562869698, 0.00028766616014763713, 0.00026600449928082526, 0.00047488996642641723, 0.00030298283672891557, 0.00014143147564027458, 0.00012125661305617541, 0.00016214436618611217, 0.00015548060764558613, 0.00030166609212756157, 0.00015421060379594564, 0.00020995916565880179, 0.00047195778461173177, 0.00029348774114623666, 0.00016273038636427373, 0.00016012204287108034, 0.00028629670850932598, 0.00011116709356429055, 8.3195198385510594e-05, 0.00027310056611895561, 0.00011445754353189841, 0.00029736835858784616, 0.00010229412873741239, 0.00017985359590966254, 0.00023773801513016224, 0.00011616546544246376, 0.00021486164769157767, 0.00011916421499336138, 9.2154972662683576e-05, 0.00019788098870776594, 0.00035385505179874599, 0.000171590581885539, 0.00012322119437158108, 0.00010846934310393408, 0.0003083652991335839, 9.5971678092610091e-05, 0.00027030031196773052, 0.00038565960130654275, 0.00020371090795379132, 0.00020391562429722399, 0.00019827669893857092, 0.00012409269402269274, 0.00013485098315868527, 0.00020256979041732848, } };
const TfArray<48, int> quant11_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(16) int8_t tensor_data12[1*3*3*48] = { 
  /* [0][0][][] */ 102,88,63,6,0,-81,42,28,-78,12,-31,106,46,6,0,-2,43,-30,46,105,45,-27,-10,9,-43,-56,88,-7,-30,-127,17,17,92,-84,23,18,-38,47,-28,-100,-30,-72,-51,4,10,-98,95,-127, 127,9,66,-95,62,82,39,-59,-127,-45,-17,127,5,-58,-127,41,-13,86,43,71,0,57,103,24,99,-50,8,-127,-81,-74,-127,113,6,-94,-83,127,7,-73,-111,-92,4,127,-35,45,-35,-68,81,-15, 49,8,33,-80,-10,-67,38,27,-77,29,-10,61,35,21,54,9,-50,5,53,91,-2,-47,-76,-3,-51,-37,-19,-32,-22,-107,-4,-7,74,-55,36,22,-79,-61,-11,-110,-8,-22,118,2,10,-102,36,-70, 
  /* [0][1][][] */ 96,21,16,62,49,90,13,-127,99,-127,-103,-51,-1,44,-69,127,-127,78,28,24,18,81,52,-42,-37,105,125,12,24,-5,-117,61,119,127,-63,32,-76,35,-16,-45,-32,-62,9,-91,38,-10,50,23, 0,127,-127,67,127,84,-127,9,107,-6,-46,73,-127,127,-41,4,39,-127,-127,22,57,22,127,-127,-127,74,-27,-18,8,-5,29,-61,127,-34,103,-68,85,-69,127,127,127,51,-53,-3,85,32,-127,-13, 37,-1,6,-127,35,55,23,-71,112,-22,-127,-4,14,31,-72,115,70,-16,15,66,52,-127,31,124,-104,127,-50,-17,51,29,-47,45,-45,85,127,46,-64,-17,-78,-47,-35,-54,127,127,127,-38,81,2, 
  /* [0][2][][] */ 22,50,24,63,-16,-1,44,27,11,-35,-10,-9,35,-69,33,-53,-15,20,60,-127,127,-6,27,-60,-96,-55,127,66,-7,-97,-40,127,70,72,-13,-5,-83,31,-7,-12,-26,-74,-4,-4,4,4,20,-17, 64,15,14,8,-26,-127,-4,-73,-20,2,-43,-43,-8,-66,-38,58,3,-47,-6,125,55,72,91,43,21,-36,-105,36,-127,-8,-34,37,46,113,-58,-9,-125,-127,15,2,-102,77,-22,12,-54,-127,68,0, 3,5,20,-48,-7,-8,50,44,-29,18,18,17,40,-67,42,-6,-6,-32,37,-110,42,-80,-58,75,-94,-45,-116,16,-7,-110,17,80,87,-31,-4,19,-127,-91,-40,-45,-34,-34,19,31,5,21,-6,-12, 
};
const TfArray<4, int> tensor_dimension12 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant12_scale = { 48, { 0.0029097499791532755, 0.0065735755488276482, 0.0081550395116209984, 0.0086025511845946312, 0.0079926289618015289, 0.012225811369717121, 0.011305191554129124, 0.02018282376229763, 0.012876770459115505, 0.0060108378529548645, 0.0051534059457480907, 0.0068911355920135975, 0.0066079255193471909, 0.01282080914825201, 0.0065539502538740635, 0.0089232642203569412, 0.020058205351233482, 0.012473228387534618, 0.0069160410203039646, 0.0068051866255700588, 0.012167610228061676, 0.0047246012836694717, 0.0035357957240194082, 0.011606773361563683, 0.0048644454218447208, 0.012638155370950699, 0.004347500391304493, 0.0076437778770923615, 0.010103865526616573, 0.0049370322376489639, 0.0091316197067499161, 0.0050644790753722191, 0.0039165862835943699, 0.0084099415689706802, 0.015038839541375637, 0.0072925998829305172, 0.0052369008772075176, 0.0046099470928311348, 0.013105524703860283, 0.0040787961333990097, 0.011487763375043869, 0.016390532255172729, 0.008657713420689106, 0.0086664138361811638, 0.0084267593920230865, 0.0052739395759999752, 0.0057311668060719967, 0.0086092157289385796, } };
const TfArray<48, int> quant12_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 3 };
const ALIGN(16) int32_t tensor_data13[48] = { -1363, -1266, 3543, -967, -3649, 2884, 2241, 22489, 2777, 3167, 5512, 2411, 912, 11574, 8430, -3196, 12651, 2832, 965, -1825, 250, -245, 1793, 6969, 1621, 9152, 2431, -629, 6210, -19, 1807, -1212, -1404, -2785, -6962, 1951, 3813, 2859, 4603, 3321, 3587, 706, 3562, 1697, 20130, 5798, -1616, 1085, };
const TfArray<1, int> tensor_dimension13 = { 1, { 48 } };
const TfArray<48, float> quant13_scale = { 48, { 0.00021325740090105683, 0.00029022339731454849, 0.0001899118215078488, 0.00010849526734091341, 0.00013902741193305701, 9.888430213322863e-05, 0.00023298787709791213, 5.4896103392820805e-05, 0.00011224231275264174, 0.00019119579519610852, 0.00012367533054202795, 0.00018815460498444736, 0.00027704628882929683, 7.6111879025120288e-05, 8.3300481492187828e-05, 0.00013959530042484403, 8.0703444837126881e-05, 0.00010355978884035721, 0.00029649658245034516, 0.0003011985681951046, 9.3427763204090297e-05, 0.00034318765392526984, 0.0001961562957148999, 0.00012761207472067326, 0.00014593843661714345, 7.2080634708981961e-05, 0.00023325838265009224, 0.00018373994680587202, 7.8575387306045741e-05, 0.00017880002269521356, 0.00015080709999892861, 0.00028884783387184143, 0.00026653669192455709, 0.0001111443925765343, 7.3780720413196832e-05, 0.00018196877499576658, 0.00011742145579773933, 0.00013522643712349236, 0.00012124602653784677, 0.00013317061529960483, 0.00021648658730555326, 0.00022769837232772261, 0.00016248892643488944, 0.00026857631746679544, 4.4345906644593924e-05, 0.00011838824138976634, 9.5451978268101811e-05, 0.0002483015414327383, } };
const TfArray<48, int> quant13_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const ALIGN(16) int8_t tensor_data14[48*1*1*8] = { 
  /* [0][0][][] */ -24,-37,-51,89,2,-67,-70,-127, 
  /* [1][0][][] */ 127,-19,33,-29,32,-86,-1,39, 
  /* [2][0][][] */ -9,48,22,-127,6,115,-60,90, 
  /* [3][0][][] */ -13,118,-38,-104,-127,5,41,-98, 
  /* [4][0][][] */ 4,-67,-101,-54,34,-91,-74,-127, 
  /* [5][0][][] */ -97,-76,88,57,39,104,54,-127, 
  /* [6][0][][] */ 2,7,-44,24,17,3,-127,-52, 
  /* [7][0][][] */ 19,-13,22,21,-47,53,127,40, 
  /* [8][0][][] */ 9,34,-58,-12,-27,-127,-56,54, 
  /* [9][0][][] */ 59,0,-46,-33,31,117,-35,127, 
  /* [10][0][][] */ -36,91,66,127,104,114,-9,-56, 
  /* [11][0][][] */ -21,-68,-29,66,-127,45,-45,14, 
  /* [12][0][][] */ 1,35,103,-69,35,-104,-127,-84, 
  /* [13][0][][] */ 36,39,-54,-92,-37,-56,-79,127, 
  /* [14][0][][] */ -58,-124,22,-72,-9,-88,23,-127, 
  /* [15][0][][] */ 13,54,71,92,79,127,-15,-34, 
  /* [16][0][][] */ 51,21,-53,-127,67,113,-90,86, 
  /* [17][0][][] */ -108,104,-127,11,11,88,-83,52, 
  /* [18][0][][] */ -127,55,28,-22,-95,27,-7,12, 
  /* [19][0][][] */ 127,4,-44,-34,67,-69,47,-78, 
  /* [20][0][][] */ 127,-93,47,-67,-43,25,104,-23, 
  /* [21][0][][] */ 28,-42,-21,28,-14,36,127,23, 
  /* [22][0][][] */ 99,48,-105,-72,5,122,43,127, 
  /* [23][0][][] */ -68,60,-40,-120,45,48,-127,-40, 
  /* [24][0][][] */ 109,-28,-119,-32,127,-46,-1,28, 
  /* [25][0][][] */ -58,-94,89,-42,88,127,-22,-109, 
  /* [26][0][][] */ 30,-63,54,37,127,-44,-47,-83, 
  /* [27][0][][] */ -17,-127,86,111,0,6,-55,98, 
  /* [28][0][][] */ -11,28,-65,6,76,-64,-28,127, 
  /* [29][0][][] */ -101,41,127,-122,40,-62,25,46, 
  /* [30][0][][] */ 116,-80,78,-18,-79,-127,57,-17, 
  /* [31][0][][] */ 15,28,38,0,-17,-15,-127,15, 
  /* [32][0][][] */ 17,-15,24,127,-23,-95,-46,-85, 
  /* [33][0][][] */ 115,-82,-75,127,-117,85,-68,-10, 
  /* [34][0][][] */ -7,-77,21,-47,-94,127,67,-38, 
  /* [35][0][][] */ 32,127,95,31,10,27,-62,0, 
  /* [36][0][][] */ 18,127,-88,-113,-81,27,59,-102, 
  /* [37][0][][] */ 30,-25,64,7,49,127,83,17, 
  /* [38][0][][] */ -88,-93,82,44,38,-17,-48,127, 
  /* [39][0][][] */ 20,32,127,-64,-23,60,-33,22, 
  /* [40][0][][] */ 27,-2,10,-5,17,-40,127,-8, 
  /* [41][0][][] */ -17,-10,-64,-127,-65,-84,-48,41, 
  /* [42][0][][] */ 43,-35,67,-42,-127,-66,-90,43, 
  /* [43][0][][] */ 85,-19,25,65,-91,-127,119,19, 
  /* [44][0][][] */ -59,-127,5,-65,-23,20,-1,-116, 
  /* [45][0][][] */ -6,87,80,81,32,127,-51,36, 
  /* [46][0][][] */ -107,6,-9,67,119,66,-98,127, 
  /* [47][0][][] */ 39,54,-61,-42,15,-42,26,-127, 
};
const TfArray<4, int> tensor_dimension14 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant14_scale = { 48, { 0.003594543319195509, 0.0048918374814093113, 0.0032010436989367008, 0.0018287333659827709, 0.0023433654569089413, 0.0016667365562170744, 0.0039271088317036629, 0.00092529691755771637, 0.0018918914720416069, 0.0032226855400949717, 0.0020845998078584671, 0.0031714250799268484, 0.0046697319485247135, 0.0012828977778553963, 0.0014040647074580193, 0.0023529375903308392, 0.0013602905673906207, 0.0017455437919124961, 0.0049975747242569923, 0.0050768284127116203, 0.0015747642610222101, 0.0057845725677907467, 0.0033062968868762255, 0.002150955144315958, 0.0024598538875579834, 0.0012149494141340256, 0.0039316681213676929, 0.0030970142688602209, 0.0013244212605059147, 0.0030137496069073677, 0.0025419171433895826, 0.0048686517402529716, 0.0044925883412361145, 0.0018733855104073882, 0.0012436050456017256, 0.0030671602580696344, 0.0019791880622506142, 0.0022792986128479242, 0.0020436528138816357, 0.0022446466609835625, 0.0036489726044237614, 0.0038379519246518612, 0.0027388192247599363, 0.004526966717094183, 0.00074746890459209681, 0.0019954836461693048, 0.0016088832635432482, 0.0041852272115647793, } };
const TfArray<48, int> quant14_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const ALIGN(16) int32_t tensor_data15[8] = { 19484, 2616, 15680, -5544, -15006, 10190, 2582, 14997, };
const TfArray<1, int> tensor_dimension15 = { 1, { 8 } };
const TfArray<8, float> quant15_scale = { 8, { 6.9848167186137289e-05, 7.6911943324375898e-05, 5.5527347285533324e-05, 7.3172879638150334e-05, 8.4140956460032612e-05, 0.0001088519420591183, 6.5705462475307286e-05, 9.3013411969877779e-05, } };
const TfArray<8, int> quant15_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const ALIGN(16) int8_t tensor_data16[8*1*1*48] = { 
  /* [0][0][][] */ 127,-24,-24,-16,-31,-96,-44,-27,64,-30,-61,-42,-37,83,-52,21,-1,-5,19,7,24,-42,5,-6,56,22,-6,28,3,47,-37,-104,1,-51,-10,-37,45,-48,-3,15,-53,-29,-29,-54,-97,-98,-1,-34, 
  /* [1][0][][] */ -70,6,105,-55,61,40,47,35,-27,8,-1,110,34,-29,-127,-59,-85,-91,23,-20,14,92,-48,12,6,-121,38,106,43,-9,31,48,49,27,17,38,-74,-21,21,30,-14,-25,-98,18,-9,-43,-86,35, 
  /* [2][0][][] */ 87,37,-15,-65,-50,-8,-58,-93,41,28,-88,-51,-10,47,-67,35,-15,89,4,16,55,44,3,16,-124,3,41,-51,-6,34,41,-88,35,-36,25,17,-57,-57,0,36,-127,-111,-18,-43,-38,-86,39,32, 
  /* [3][0][][] */ 10,-6,13,18,-112,-27,-16,39,-23,-52,-7,72,5,-23,-80,-33,-39,37,16,-56,-51,127,15,-51,35,55,54,-53,10,2,8,15,25,34,1,-9,48,49,16,-17,50,-15,26,-62,-22,5,17,43, 
  /* [4][0][][] */ -43,12,-126,1,-17,92,22,40,-24,127,43,61,18,-71,-28,46,-15,-14,-4,20,-7,46,-80,15,-6,7,52,-4,52,-51,113,98,56,60,6,-49,-75,23,11,-26,66,40,18,25,47,34,9,67, 
  /* [5][0][][] */ -34,6,40,-4,46,-63,-44,-37,-35,-73,7,-30,58,-2,-18,6,16,-3,4,37,13,64,18,28,11,-4,-32,-14,-44,-9,-127,-13,-36,-11,33,-18,-10,-38,-5,-30,-17,9,-34,-10,29,32,-8,58, 
  /* [6][0][][] */ 11,57,10,66,-11,35,-52,56,-72,-41,45,17,57,14,37,6,7,-52,-51,39,7,65,36,-36,-94,-25,-23,33,-93,9,-87,9,13,-56,-28,-53,127,0,-40,-53,35,46,32,-44,-67,-12,-51,-39, 
  /* [7][0][][] */ -50,17,-79,14,-30,-2,-14,-22,-54,-56,32,68,46,10,-69,-83,-60,82,-17,2,42,7,43,-36,-37,92,-40,-106,-49,-15,-98,-16,-10,-32,-56,-4,-30,-41,-55,-12,-31,62,50,-9,-47,-55,127,-36, 
};
const TfArray<4, int> tensor_dimension16 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant16_scale = { 8, { 0.0029685469344258308, 0.0032687576021999121, 0.0023599122650921345, 0.0031098474282771349, 0.003575990442186594, 0.0046262075193226337, 0.0027924820315092802, 0.0039530699141323566, } };
const TfArray<8, int> quant16_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const ALIGN(16) int32_t tensor_data17[48] = { 5363, 9519, 12709, 9712, 38999, -3209, 1919, -81, -2099, -12216, -3070, -1805, 10363, 8841, 9396, -3109, 6067, 6053, 697, -3096, 267, -3749, 1268, 409, 9619, 10863, -3449, -1004, -3160, 1834, 9847, 5313, 2181, -2184, 187, -2234, 12448, 7832, -12, 1161, 8571, -6653, 3603, 2833, 443, 3099, 6995, -2034, };
const TfArray<1, int> tensor_dimension17 = { 1, { 48 } };
const TfArray<48, float> quant17_scale = { 48, { 0.00016230886103585362, 0.0001083136085071601, 6.1332168115768582e-05, 0.000122005985758733, 5.0003764044959098e-05, 0.0002674640272744, 0.00013704627053812146, 0.00035482531529851258, 0.00030445540323853493, 0.00018771528266370296, 0.00014603919407818466, 0.00021550085511989892, 0.00012131446419516578, 0.00010765926708700135, 0.00017711872351355851, 0.00015188010002020746, 0.0001213200666825287, 0.00013132650929037482, 0.00042431862675584853, 0.00022873519628774375, 0.0001323699252679944, 0.00014317792374640703, 0.00015358974633272737, 0.00020612530352082103, 0.0001973808539332822, 0.00015571556286886334, 0.00031418021535500884, 0.00025737110991030931, 0.00031814997782930732, 0.00021333016047719866, 0.00016877544112503529, 0.00020907397265546024, 0.00020461958774831146, 0.00058026838814839721, 9.9987017165403813e-05, 0.00014005026605445892, 0.00017303694039583206, 0.00010585836571408436, 0.00014658542932011187, 0.00021823069255333394, 0.00016856387082953006, 0.0001824339124141261, 0.0002326245594304055, 0.00030773630714975297, 0.00028279639082029462, 0.00023761445481795818, 0.00017911287432070822, 0.0002441384713165462, } };
const TfArray<48, int> quant17_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const ALIGN(16) int8_t tensor_data18[1*3*3*48] = { 
  /* [0][0][][] */ -98,-21,60,-19,-127,0,-119,-1,2,127,51,20,-59,79,-10,33,38,37,26,-30,-119,-23,66,32,-42,0,5,-61,31,-116,100,41,-15,24,52,-35,14,-127,-27,127,-60,32,-7,-8,-15,23,17,-14, 20,-127,-9,19,-33,18,-127,-19,43,20,127,89,-45,-81,-114,-37,-4,-53,123,65,-3,74,-6,19,-77,-14,14,-127,20,-61,-17,-127,-30,10,-30,-127,-22,21,33,86,127,-11,-13,127,-5,-127,3,-17, -127,-45,43,3,-95,15,-95,-10,-4,96,6,-20,-32,57,34,31,-29,-1,22,-59,-80,-7,80,18,-10,-19,22,-40,-16,-127,54,-12,-1,13,-62,-34,10,-81,22,84,-53,22,-3,5,23,9,15,41, 
  /* [0][1][][] */ 60,-8,44,-6,-88,10,53,-10,-45,77,37,28,-64,-20,-97,127,-30,14,48,127,30,33,-127,-25,-45,-102,-11,-57,127,19,26,113,-127,6,94,21,-8,31,-127,-101,40,-27,20,11,-127,55,12,-62, 120,-100,-127,-127,91,127,-3,127,-127,-82,-19,127,-18,-127,-127,-98,-22,-127,-82,64,127,127,-38,81,-127,55,-110,102,-42,-56,-127,-113,4,127,-127,102,-127,-95,109,-44,-60,127,-127,-88,86,96,-127,-59, 37,14,105,0,-74,-17,-3,-26,-30,36,12,-33,27,-71,-68,104,-127,-37,30,88,6,69,0,-127,7,-58,127,1,-26,103,-56,88,118,-29,-70,15,-24,-21,-12,-62,19,-24,-4,-16,8,20,-23,127, 
  /* [0][2][][] */ -115,-54,78,-8,-93,28,75,4,108,38,57,11,-78,91,7,12,72,58,16,-46,-27,-42,57,31,-35,2,2,19,18,37,84,4,9,14,70,26,8,-88,-63,13,-58,14,17,-26,-22,-26,-3,-10, -76,-107,95,-35,-64,-1,122,-1,83,25,83,-47,127,-95,-120,-19,-43,55,-127,6,-40,9,-76,-5,10,-127,6,48,11,36,10,-86,11,-28,-27,29,-19,28,20,-63,-3,24,38,-60,9,-37,9,9, -93,2,63,8,-119,54,45,0,39,5,21,14,-70,59,38,0,-31,70,9,-56,4,-6,107,-55,-26,-32,17,39,-1,39,24,-46,3,19,-34,18,9,-84,-16,-47,-45,42,34,-10,-8,-20,15,15, 
};
const TfArray<4, int> tensor_dimension18 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant18_scale = { 48, { 0.0084845349192619324, 0.005661986768245697, 0.0032060784287750721, 0.0063777421601116657, 0.0026138972025364637, 0.013981416821479797, 0.0071639581583440304, 0.018548142164945602, 0.015915105119347572, 0.0098126307129859924, 0.0076340539380908012, 0.011265093460679054, 0.0063415933400392532, 0.005627781618386507, 0.009258706122636795, 0.0079393815249204636, 0.0063418862409889698, 0.0068649635650217533, 0.022180836647748947, 0.011956905946135521, 0.0069195069372653961, 0.00748448446393013, 0.0080287521705031395, 0.010774996131658554, 0.010317889042198658, 0.0081398766487836838, 0.016423460096120834, 0.013453819788992405, 0.016630975529551506, 0.011151622980833054, 0.0088225686922669411, 0.010929134674370289, 0.010696286335587502, 0.030332954600453377, 0.0052267224527895451, 0.0073209889233112335, 0.0090453345328569412, 0.0055336412042379379, 0.0076626078225672245, 0.011407793499529362, 0.0088115092366933823, 0.0095365522429347038, 0.012160218320786953, 0.016086610034108162, 0.014782900922000408, 0.012421060353517532, 0.0093629481270909309, 0.012762096710503101, } };
const TfArray<48, int> quant18_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 3 };
const ALIGN(16) int32_t tensor_data19[48] = { 10738, -76, 1668, 2141, 4978, 1149, 9585, -1045, 17964, 9392, -1304, -499, 3576, 1635, 143, 3729, 4011, 3271, -2468, -2003, 3681, 3164, 4037, 233, 5772, 2651, 7974, -1167, 4907, -670, 9953, 8753, 5220, 1084, 1620, 2626, 4753, 1438, 2151, 2048, 152, 5816, 3594, 7048, 4732, 1635, 62, 2074, };
const TfArray<1, int> tensor_dimension19 = { 1, { 48 } };
const TfArray<48, float> quant19_scale = { 48, { 9.1010369942523539e-05, 0.00027566452627070248, 0.00025373493554070592, 0.00015225111565086991, 0.00015429678023792803, 0.00011577305849641562, 7.4608622526284307e-05, 0.00018318963702768087, 5.2735733333975077e-05, 7.814092532498762e-05, 0.0001237344549736008, 0.00013593220501206815, 0.00015247982810251415, 0.00018558489682618529, 8.2542755990289152e-05, 0.00018954822735395283, 0.0001129738157032989, 0.00019061603234149516, 0.00016131049778778106, 8.1192287325393409e-05, 0.00018917946727015078, 9.8779171821661294e-05, 0.00014525362348649651, 0.00035280303563922644, 0.00012828757462557405, 0.00025097932666540146, 0.00011659938172670081, 0.0002519029367249459, 0.00017512042541056871, 9.63104612310417e-05, 8.1604484876152128e-05, 7.2433271270710975e-05, 0.00016605257405899465, 9.7684089269023389e-05, 0.00019797669665422291, 0.00024771748576313257, 0.0001488131529185921, 0.00025531489518471062, 0.00024667923571541905, 0.0001210559785249643, 0.0002211558457929641, 0.00011654075206024572, 0.00020862152450717986, 0.00010351341916248202, 0.00019389453518670052, 0.00011837125930469483, 0.00018067295604851097, 0.00031004942138679326, } };
const TfArray<48, int> quant19_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const ALIGN(16) int8_t tensor_data20[48*1*1*8] = { 
  /* [0][0][][] */ 46,-73,35,-19,62,-127,17,-68, 
  /* [1][0][][] */ -38,-61,-77,57,-127,21,-30,21, 
  /* [2][0][][] */ 81,-67,68,-28,127,-21,10,71, 
  /* [3][0][][] */ -16,127,-16,116,25,11,-40,-40, 
  /* [4][0][][] */ -28,127,58,-27,53,10,-75,28, 
  /* [5][0][][] */ -107,27,7,17,127,-24,97,-6, 
  /* [6][0][][] */ 127,-57,119,22,51,106,76,17, 
  /* [7][0][][] */ -28,-48,53,55,71,17,-53,127, 
  /* [8][0][][] */ 41,-14,-22,-70,-58,127,-111,39, 
  /* [9][0][][] */ -127,17,-74,-9,71,-29,-43,7, 
  /* [10][0][][] */ -9,-98,62,25,-42,-87,-127,-99, 
  /* [11][0][][] */ 51,91,-13,11,-43,-68,13,127, 
  /* [12][0][][] */ 28,-57,-127,56,-81,123,56,111, 
  /* [13][0][][] */ -56,-15,-127,33,-96,97,27,47, 
  /* [14][0][][] */ -53,127,-82,96,89,46,-22,78, 
  /* [15][0][][] */ -104,-18,-38,-1,127,53,-67,-124, 
  /* [16][0][][] */ 87,-127,-89,-34,-69,120,-42,-7, 
  /* [17][0][][] */ 19,127,-94,-39,-89,40,61,-118, 
  /* [18][0][][] */ -52,-91,23,13,127,-31,-34,62, 
  /* [19][0][][] */ -82,127,-11,51,-16,-119,-119,63, 
  /* [20][0][][] */ 56,-2,21,-54,9,-70,36,127, 
  /* [21][0][][] */ 65,-36,127,94,-27,120,70,-30, 
  /* [22][0][][] */ -40,127,17,6,110,-61,-102,-47, 
  /* [23][0][][] */ 20,-37,20,127,-10,-50,59,-12, 
  /* [24][0][][] */ -31,59,127,-47,-16,-18,21,-22, 
  /* [25][0][][] */ -52,-127,109,58,21,5,-24,118, 
  /* [26][0][][] */ 38,-27,-127,-113,-82,56,47,92, 
  /* [27][0][][] */ 45,127,-90,-65,-48,37,39,-123, 
  /* [28][0][][] */ -27,60,-45,-127,-3,-21,-118,-58, 
  /* [29][0][][] */ -125,85,-127,-51,113,75,-75,22, 
  /* [30][0][][] */ 68,-75,10,-29,-127,118,104,49, 
  /* [31][0][][] */ -70,86,-45,54,127,-57,-5,-4, 
  /* [32][0][][] */ -2,85,35,-45,127,-33,-5,-76, 
  /* [33][0][][] */ -127,55,-108,12,36,29,-21,17, 
  /* [34][0][][] */ 38,2,39,-77,-21,-127,75,120, 
  /* [35][0][][] */ -127,6,44,-19,-78,-8,16,12, 
  /* [36][0][][] */ -6,-43,-45,51,-20,16,127,42, 
  /* [37][0][][] */ -6,-19,-61,-50,-39,-127,-90,-19, 
  /* [38][0][][] */ -100,16,27,14,-127,27,43,3, 
  /* [39][0][][] */ -49,-39,7,-34,-5,79,-85,-127, 
  /* [40][0][][] */ 76,-111,-6,103,-63,-90,127,87, 
  /* [41][0][][] */ 29,127,93,43,25,31,-96,-37, 
  /* [42][0][][] */ 36,127,-27,-12,-34,26,-7,-52, 
  /* [43][0][][] */ -63,82,-127,-116,-14,14,-78,57, 
  /* [44][0][][] */ -53,28,-17,5,27,127,3,-3, 
  /* [45][0][][] */ -11,112,-76,-68,-58,-57,0,127, 
  /* [46][0][][] */ 26,102,-88,-39,-68,35,16,-127, 
  /* [47][0][][] */ 40,6,-15,-75,-67,-127,-36,36, 
};
const TfArray<4, int> tensor_dimension20 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant20_scale = { 48, { 0.0017228224314749241, 0.0052183177322149277, 0.0048031914047896862, 0.0028821071609854698, 0.0029208313208073378, 0.0021915789693593979, 0.001412337995134294, 0.0034677719231694937, 0.00099828513339161873, 0.0014792042784392834, 0.0023422879166901112, 0.0025731907226145267, 0.0028864364139735699, 0.0035131140612065792, 0.0015625307569280267, 0.0035881397780030966, 0.002138589508831501, 0.0036083532031625509, 0.0030536006670445204, 0.0015369664179161191, 0.0035811590496450663, 0.0018698854837566614, 0.002749644685536623, 0.0066785463131964207, 0.0024284783285111189, 0.0047510275617241859, 0.0022072212304919958, 0.0047685117460787296, 0.0033150219824165106, 0.001823152881115675, 0.0015447693876922131, 0.0013711587525904179, 0.0031433680560439825, 0.001849155523814261, 0.0037476902361959219, 0.004689281340688467, 0.0028170265723019838, 0.0048330998979508877, 0.0046696271747350693, 0.002291584387421608, 0.0041864705272018909, 0.0022061113268136978, 0.0039491965435445309, 0.001959504559636116, 0.0036704151425510645, 0.0022407628130167723, 0.0034201312810182571, 0.0058692218735814095, } };
const TfArray<48, int> quant20_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const ALIGN(16) int32_t tensor_data21[8] = { 7891, -4054, -3647, 5556, 2322, -20357, -7636, -8479, };
const TfArray<1, int> tensor_dimension21 = { 1, { 8 } };
const TfArray<8, float> quant21_scale = { 8, { 0.00020745143410749733, 0.00014411032316274941, 0.00017316968296654522, 0.00011356843606336042, 0.00020142810535617173, 7.3291666922159493e-05, 7.969649595906958e-05, 0.00011563719453988597, } };
const TfArray<8, int> quant21_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const ALIGN(16) int8_t tensor_data22[8*1*1*48] = { 
  /* [0][0][][] */ -27,15,4,38,-23,5,-3,28,-52,-14,-40,3,-19,17,31,2,-55,-25,30,-15,-33,127,-21,-23,-20,-35,4,33,-29,41,8,-24,-4,23,30,41,19,1,29,-24,2,-31,-19,-17,-24,20,18,14, 
  /* [1][0][][] */ 14,62,8,44,34,43,49,118,-43,-43,85,-37,-33,-35,36,-20,-15,4,46,3,34,-127,-4,-65,5,9,-14,14,-9,9,-35,-64,-47,-5,25,-15,16,67,69,-23,25,18,42,-24,-34,46,11,47, 
  /* [2][0][][] */ -3,25,0,28,21,15,-31,31,17,7,58,25,9,-12,34,-49,16,25,-10,9,-17,127,4,-5,22,-40,-2,0,-25,29,-22,-55,-8,14,20,-32,34,-11,-45,-18,20,-11,-8,-46,-29,38,10,17, 
  /* [3][0][][] */ -42,43,0,7,-23,30,56,-2,-3,3,1,20,-21,37,37,14,-18,-5,0,-11,38,-80,-12,15,-12,7,-127,33,-34,-29,-12,10,-37,-16,7,31,35,-13,-39,-27,-1,-15,6,13,17,-13,35,26, 
  /* [4][0][][] */ 19,-1,-42,8,16,-6,14,-7,-50,9,2,18,-2,-17,-16,13,-23,36,-15,-15,4,-127,0,-9,34,34,29,-45,49,-3,4,13,-19,42,27,-15,-23,20,-6,5,-4,-61,-76,18,31,30,3,-5, 
  /* [5][0][][] */ -12,53,58,-9,1,36,14,-90,66,-31,-6,2,93,-59,9,28,12,-30,35,-5,-16,127,8,21,80,-6,77,50,80,41,-12,-22,-53,-40,82,26,-41,-58,-2,-89,6,-23,67,71,-38,-29,-24,-17, 
  /* [6][0][][] */ 77,2,-38,7,55,-15,41,-45,61,47,6,-38,-10,46,37,-77,31,-125,-23,-22,34,-12,-2,35,-48,-46,53,-30,51,-41,127,48,52,54,37,-64,-54,20,67,-27,-28,24,-71,73,51,12,54,-58, 
  /* [7][0][][] */ -22,41,44,58,-10,8,57,89,49,21,-6,74,-64,-3,36,-19,70,-17,-21,-20,0,-127,-11,-103,-72,73,43,22,7,11,11,-18,17,-19,5,30,2,95,-98,-18,6,0,31,-19,-42,-7,32,29, 
};
const TfArray<4, int> tensor_dimension22 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant22_scale = { 8, { 0.010236681438982487, 0.0071111172437667847, 0.0085450494661927223, 0.0056040291674435139, 0.0099394600838422775, 0.0036165737546980381, 0.00393261993303895, 0.0057061119005084038, } };
const TfArray<8, int> quant22_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const ALIGN(16) int32_t tensor_data23[48] = { 31220, 19172, 7546, 14916, 3882, 8638, 12237, 5706, 51370, -2320, 2450, 21544, 9768, -487, 6999, -1582, 9037, 28479, 18646, -1944, 3376, -6505, -27, -180, 47492, 32652, 1705, 1316, 1480, 9648, -1319, 2854, -14804, 19390, 23154, 22413, 22476, 21939, -318, 426, 4076, 64288, 343, 972, 416, -1397, 16998, 11291, };
const TfArray<1, int> tensor_dimension23 = { 1, { 48 } };
const TfArray<48, float> quant23_scale = { 48, { 3.655148611869663e-05, 0.00010914255835814402, 0.00010620092507451773, 0.00011067420564359054, 0.00011362207442289218, 0.00010288077464792877, 0.00017815532919485122, 0.00012009675992885605, 3.6728171835420653e-05, 6.6126354795414954e-05, 7.4313960794825107e-05, 5.5827156757004559e-05, 0.00014122104039415717, 5.210841482039541e-05, 0.00017427513375878334, 7.9013974755071104e-05, 2.9605473173432983e-05, 6.4652958826627582e-05, 5.7412271416978911e-05, 0.00013352565292734653, 7.8506120189558715e-05, 0.00021675856260117143, 9.0227105829399079e-05, 0.00013706841855309904, 3.52823844878003e-05, 6.8057655880693346e-05, 7.8210468927863985e-05, 8.0946439993567765e-05, 5.8084591728402302e-05, 0.00014445654232986271, 0.00015798606909811497, 0.00018036477558780462, 7.0425638114102185e-05, 5.9434081776998937e-05, 8.1141464761458337e-05, 0.00012205694656586275, 8.6175343312788755e-05, 0.0001247792097274214, 0.00022869072563480586, 6.1048987845424563e-05, 0.0001313122920691967, 2.3835676984163001e-05, 7.7028802479617298e-05, 6.0248195950407535e-05, 0.00038145907456055284, 0.00016705082089174539, 6.6297092416789383e-05, 8.4028644778300077e-05, } };
const TfArray<48, int> quant23_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const ALIGN(16) int8_t tensor_data24[1*3*3*48] = { 
  /* [0][0][][] */ -57,-74,-20,-58,-55,31,-35,-62,-58,73,29,-121,5,78,-98,93,58,-64,-67,127,47,46,-86,79,-55,-48,53,58,42,-49,82,51,47,-78,-68,-17,-80,-84,116,62,2,-75,58,41,89,55,-42,-64, -66,-127,-51,-84,-127,32,-50,-111,-57,121,77,-127,-28,87,-127,100,70,-113,-118,11,70,67,127,116,-79,-72,84,58,66,-69,96,86,51,-98,-84,-44,-97,-91,127,78,-74,-122,77,38,127,107,-91,-92, -42,-65,-8,-62,-82,44,-26,-31,-54,37,25,-87,-24,99,-86,63,39,-42,-39,-15,62,-125,-84,26,-8,-17,40,19,37,-31,59,54,24,-75,-54,-19,-83,-53,26,32,-65,-82,64,59,113,41,-37,-33, 
  /* [0][1][][] */ -63,-61,-61,-91,-69,21,-65,-72,-127,127,60,-96,-19,57,-67,120,122,-76,-79,111,43,68,-107,90,-84,-83,83,127,71,-61,93,55,127,-91,-94,-53,-111,-107,107,96,-59,-126,82,61,40,90,-71,-93, -127,-98,-127,-127,-99,-108,-127,-127,-117,100,127,-103,-127,78,-33,127,109,-127,-127,-60,127,72,106,127,-127,-127,127,106,127,-127,127,127,113,-118,-127,-127,-127,-127,97,127,-127,-127,127,127,18,127,-127,-127, -56,-31,-71,-100,-78,-94,-81,-48,-120,68,48,-83,-71,127,-34,75,127,-56,-64,-103,86,-127,-105,43,-34,-53,38,23,73,-52,100,66,94,-63,-82,-69,-97,-69,68,70,-61,-52,82,96,49,23,-35,-107, 
  /* [0][2][][] */ -77,-36,-27,-31,-38,-53,-36,-37,-85,99,20,-44,7,-35,-56,58,42,-34,-3,42,47,27,-39,21,-64,-39,27,56,35,-18,100,8,89,-76,-2,-40,-16,-38,-7,42,-57,-98,30,20,2,-8,-32,-14, -105,-37,-69,-10,-12,-127,-52,-50,-64,88,49,-62,-33,-1,-61,18,64,-16,-19,-31,79,21,65,29,-110,-72,52,71,61,-42,98,28,81,-127,-31,-95,-21,-29,2,48,-60,-65,69,67,47,34,-49,-50, -70,-8,-61,-20,25,-108,-40,-26,-55,92,10,-54,-19,-9,-14,15,76,8,-11,-34,24,-63,-21,1,-54,-32,-2,40,22,-23,77,5,43,-77,-32,-64,-14,-30,21,12,-82,-81,26,74,-4,-33,-1,-52, 
};
const TfArray<4, int> tensor_dimension24 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant24_scale = { 48, { 0.0015964873600751162, 0.0047671031206846237, 0.0046386192552745342, 0.0048340023495256901, 0.0049627586267888546, 0.0044936025515198708, 0.0077814268879592419, 0.0052455584518611431, 0.0016042045317590237, 0.0028882515616714954, 0.0032458677887916565, 0.0024384055286645889, 0.0061682197265326977, 0.002275979146361351, 0.0076119485311210155, 0.003451154101639986, 0.001293100998736918, 0.0028238969389349222, 0.0025076398160308599, 0.0058321026153862476, 0.0034289720933884382, 0.0094675300642848015, 0.0039409184828400612, 0.0059868423268198967, 0.0015410558553412557, 0.0029726065695285797, 0.0034160586073994637, 0.0035355596337467432, 0.0025370053481310606, 0.006309539545327425, 0.00690047862008214, 0.0078779309988021851, 0.0030760345980525017, 0.0025959480553865433, 0.0035440779756754637, 0.0053311749361455441, 0.0037639464717358351, 0.0054500773549079895, 0.0099887000396847725, 0.0026664834003895521, 0.0057354276068508625, 0.0010410891845822334, 0.0033644461072981358, 0.0026315066497772932, 0.016661280766129494, 0.007296406663954258, 0.0028957088943570852, 0.0036701834760606289, } };
const TfArray<48, int> quant24_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 3 };
const ALIGN(16) int32_t tensor_data25[48] = { 2041, 4177, 2808, 64, -1064, 382, 11119, 4777, 2444, -3922, 1977, 361, 5015, -4, 1461, -2104, -134, 6359, 1435, 1920, -1211, 45382, 2993, -1859, 1605, 3896, 3354, -1883, 69, 45, -4358, -2835, 3747, 1712, 7029, 12327, 4549, 9685, -3575, -1503, -1440, 3083, 1738, 967, -4276, -2833, 4534, 1214, };
const TfArray<1, int> tensor_dimension25 = { 1, { 48 } };
const TfArray<48, float> quant25_scale = { 48, { 0.00014605642354581505, 0.00018404233560431749, 0.00018186087254434824, 0.00023352989228442311, 0.00023598509142175317, 0.00021165827638469636, 7.4696981755550951e-05, 0.00012268759019207209, 0.00017723032215144485, 0.00013758843124378473, 0.00018832537170965225, 0.00022877892479300499, 0.00013415387365967035, 0.00035792723065242171, 0.00033594598062336445, 0.00015862290456425399, 0.0003338534152135253, 9.8344469734001905e-05, 0.00019623551634140313, 0.00017332944844383746, 0.00018703586829360574, 3.6093741073273122e-05, 0.00015936241834424436, 0.00017346261302009225, 0.00016182020772248507, 0.00017610059876460582, 0.00016954058082774282, 0.00019903010979760438, 0.00029079723753966391, 0.00029292309773154557, 0.00010952549200737849, 0.00012683523527812213, 0.00019116706971544772, 0.00024259502242784947, 0.00012960871390532702, 7.6878932304680347e-05, 0.00019104461534880102, 9.0579378593247384e-05, 0.00016331351071130484, 0.0002096060779877007, 0.0002270527184009552, 0.00018645680393092334, 0.00016990136646199971, 0.00027033811784349382, 0.00011813695164164528, 0.00016918992332648486, 0.00012948672519996762, 0.00014717639714945108, } };
const TfArray<48, int> quant25_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const ALIGN(16) int8_t tensor_data26[48*1*1*8] = { 
  /* [0][0][][] */ -19,62,-78,75,48,127,36,18, 
  /* [1][0][][] */ 48,-127,-82,-31,-31,45,76,-37, 
  /* [2][0][][] */ -54,36,-34,-111,-39,-127,-22,-50, 
  /* [3][0][][] */ -14,127,73,32,-3,-96,-11,25, 
  /* [4][0][][] */ -83,19,-127,86,14,-30,-32,-70, 
  /* [5][0][][] */ 104,-115,-127,21,-5,-17,83,-59, 
  /* [6][0][][] */ -22,-121,-61,4,-127,-63,-60,85, 
  /* [7][0][][] */ -19,-55,-10,-47,45,-9,-25,127, 
  /* [8][0][][] */ 22,27,-95,-91,61,-29,-127,-95, 
  /* [9][0][][] */ -127,55,-13,97,-13,67,87,7, 
  /* [10][0][][] */ -45,-20,84,-127,-30,66,14,52, 
  /* [11][0][][] */ 102,-13,104,32,-42,34,94,127, 
  /* [12][0][][] */ 44,33,4,-56,55,127,61,-97, 
  /* [13][0][][] */ 44,40,-50,57,3,-127,-39,43, 
  /* [14][0][][] */ 12,-127,-16,-20,11,48,43,-37, 
  /* [15][0][][] */ -83,-6,-17,-56,70,127,-64,-39, 
  /* [16][0][][] */ 6,-42,97,19,-25,5,127,67, 
  /* [17][0][][] */ 74,9,80,19,-28,-118,-46,-127, 
  /* [18][0][][] */ -119,17,-99,-21,-15,-127,25,-112, 
  /* [19][0][][] */ 82,28,127,-31,-50,61,104,125, 
  /* [20][0][][] */ 14,127,56,-3,20,36,58,18, 
  /* [21][0][][] */ -54,30,30,-127,-66,108,-6,12, 
  /* [22][0][][] */ 9,-11,92,-23,-42,19,127,114, 
  /* [23][0][][] */ -100,117,50,45,-116,-105,-112,127, 
  /* [24][0][][] */ -3,-8,81,23,-116,127,-24,-84, 
  /* [25][0][][] */ -48,14,66,19,-127,50,-81,20, 
  /* [26][0][][] */ -52,-127,39,-50,9,48,-8,-6, 
  /* [27][0][][] */ -17,64,23,58,-18,127,-41,-23, 
  /* [28][0][][] */ 6,-119,67,14,51,127,42,49, 
  /* [29][0][][] */ 11,127,-15,30,-72,-71,-6,28, 
  /* [30][0][][] */ -46,71,96,82,-127,-62,-42,-115, 
  /* [31][0][][] */ 21,60,42,51,-57,-21,20,-127, 
  /* [32][0][][] */ -22,-32,-58,62,-127,-28,-45,18, 
  /* [33][0][][] */ 95,35,61,64,-24,70,49,127, 
  /* [34][0][][] */ 127,10,-98,-31,-69,-14,79,22, 
  /* [35][0][][] */ 104,94,110,-127,-66,-95,40,119, 
  /* [36][0][][] */ -43,-91,127,25,42,59,14,-19, 
  /* [37][0][][] */ -3,7,-28,-7,-8,-65,-52,127, 
  /* [38][0][][] */ 127,-3,60,6,1,16,-66,41, 
  /* [39][0][][] */ 56,57,-88,-127,-104,75,52,-60, 
  /* [40][0][][] */ -34,127,-25,66,-47,-6,-40,-16, 
  /* [41][0][][] */ -127,50,-41,-46,89,60,-8,-84, 
  /* [42][0][][] */ 39,-24,-8,-20,-20,127,7,89, 
  /* [43][0][][] */ -60,45,127,13,64,8,-25,8, 
  /* [44][0][][] */ 4,127,6,25,-53,-74,-10,-9, 
  /* [45][0][][] */ -112,108,66,-127,-92,25,-81,-60, 
  /* [46][0][][] */ 34,-36,-11,26,29,16,-127,79, 
  /* [47][0][][] */ -117,-127,28,51,40,-86,25,90, 
};
const TfArray<4, int> tensor_dimension26 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant26_scale = { 48, { 0.0021873742807656527, 0.0027562598697841167, 0.0027235897723585367, 0.0034973968286067247, 0.0035341663751751184, 0.0031698425300419331, 0.001118678948841989, 0.0018373973434790969, 0.002654241630807519, 0.0020605556201189756, 0.0028204035479575396, 0.0034262451808899641, 0.0020091189071536064, 0.0053603993728756905, 0.0050312033854424953, 0.0023755726870149374, 0.0049998648464679718, 0.0014728291425853968, 0.0029388677794486284, 0.0025958211626857519, 0.002801091643050313, 0.00054054806241765618, 0.002386647742241621, 0.002597815589979291, 0.0024234561715275049, 0.0026373225264251232, 0.002539078239351511, 0.0029807202517986298, 0.0043550455011427402, 0.0043868827633559704, 0.0016402786131948233, 0.0018995132995769382, 0.0028629614971578121, 0.0036331582814455032, 0.0019410495879128575, 0.0011513563804328442, 0.0028611274901777506, 0.0013565373374149203, 0.0024458202533423901, 0.0031391081865876913, 0.0034003930632025003, 0.0027924194000661373, 0.0025444815400987864, 0.0040486450307071209, 0.0017692458350211382, 0.002533826744183898, 0.0019392225658521056, 0.0022041471675038338, } };
const TfArray<48, int> quant26_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const ALIGN(16) int32_t tensor_data27[8] = { 6090, -11159, -917, 7723, 3102, -5502, 1538, 5744, };
const TfArray<1, int> tensor_dimension27 = { 1, { 8 } };
const TfArray<8, float> quant27_scale = { 8, { 0.00022543857630807906, 0.00016576981579419225, 8.4587212768383324e-05, 0.00014823580568190664, 0.00029926252318546176, 0.00013744045281782746, 0.00016487450920976698, 0.00012823463475797325, } };
const TfArray<8, int> quant27_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const ALIGN(16) int8_t tensor_data28[8*1*1*48] = { 
  /* [0][0][][] */ -21,-7,-8,-26,-65,-12,-11,-19,67,11,4,-7,14,10,-13,3,-44,13,-12,-17,4,5,-19,-2,14,-8,84,10,-13,-77,-17,10,-6,33,127,-9,-20,-42,30,-42,19,12,1,-13,-22,2,-25,-82, 
  /* [1][0][][] */ 17,-30,-18,58,11,-21,17,36,64,76,40,-53,-58,70,5,-1,-11,-37,23,-16,-69,45,-49,36,91,6,-34,39,22,-3,127,23,-20,-33,-36,-9,-22,3,-29,-7,-3,-24,1,18,-3,36,34,19, 
  /* [2][0][][] */ -61,7,-66,116,-59,-40,20,-66,-83,51,45,-99,-25,-3,-29,-2,121,40,-51,-31,-60,-24,-33,2,75,-29,127,-15,81,-6,-71,4,-7,-22,48,10,-42,22,21,-118,54,-63,-49,-118,-34,-76,-90,105, 
  /* [3][0][][] */ 19,-64,2,-53,27,-36,0,-77,42,-63,11,-10,-78,-78,-21,4,16,-21,30,-44,-17,25,-91,9,81,-45,55,19,1,-5,6,-21,-28,36,23,-36,-57,24,-15,-9,127,7,-57,44,-35,41,-12,-60, 
  /* [4][0][][] */ 21,-3,18,6,-1,19,-5,-17,45,23,14,-52,2,-2,-62,20,7,21,26,-21,-29,32,6,44,38,7,-34,9,42,-19,-14,27,-1,0,32,23,-127,-6,47,15,11,-14,-7,23,-29,54,-33,-103, 
  /* [5][0][][] */ -37,-108,40,115,-41,-1,-48,111,-113,88,55,17,-83,13,68,-30,-19,38,44,-15,-2,24,52,40,-50,13,-28,40,-46,-105,42,24,-113,-50,-33,9,127,-1,-14,26,-31,-19,87,114,20,39,33,44, 
  /* [6][0][][] */ 98,6,-8,-11,94,-12,-30,-56,43,41,31,-27,-19,10,25,1,-1,6,-5,-20,-27,17,20,18,66,-55,64,1,-18,127,-30,-5,45,33,-126,-15,-88,-34,46,-80,-13,-4,-3,-113,-16,-2,-25,-5, 
  /* [7][0][][] */ -35,-67,44,-44,23,127,42,-51,2,-82,-50,-13,-6,-17,-43,8,17,-53,109,58,41,-29,15,-6,-11,7,84,-4,47,19,11,-12,-39,-11,-52,101,-95,79,-20,-26,-40,40,6,-72,5,-19,53,-32, 
};
const TfArray<4, int> tensor_dimension28 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant28_scale = { 8, { 0.0095811393111944199, 0.0070452173240482807, 0.0035949563607573509, 0.0063000218942761421, 0.012718657031655312, 0.0058412193320691586, 0.0070071662776172161, 0.0054499716497957706, } };
const TfArray<8, int> quant28_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const ALIGN(16) int32_t tensor_data29[48] = { 9267, 3468, -3843, 4361, 985, -105, 6440, -712, -54, 5619, 576, 53, -2132, 14969, 2849, 191, -6302, -368, -456, -294, 13203, -16, -15309, -1950, -6433, -1745, 267, -89, -1221, 271, -6169, -1465, 14489, -3567, 1103, 1646, -299, -927, -1255, 2188, 21019, 3468, 2744, -821, -804, -175, -4530, 4740, };
const TfArray<1, int> tensor_dimension29 = { 1, { 48 } };
const TfArray<48, float> quant29_scale = { 48, { 0.00018929308862425387, 0.00038358272286131978, 0.00019126116239931434, 0.0002686558582354337, 0.00033177132718265057, 0.00053074193419888616, 0.00011654657282633707, 0.00020385667448863387, 7.9949582868721336e-05, 0.00019808245997410268, 0.00032123495475389063, 0.00045992658124305308, 0.00032206129981204867, 0.00011855192860821262, 0.00013593750190921128, 0.00025106652174144983, 5.9859652537852526e-05, 0.001251553650945425, 0.00037255225470289588, 0.00018909045320469886, 0.00011168080527568236, 0.00053199502872303128, 0.00012555952707771212, 0.00019695675291586667, 0.00022332955268211663, 0.00024175339785870165, 0.0003492390678729862, 0.00021257797197904438, 0.00057461211690679193, 0.00029273441759869456, 0.00019349511421751231, 0.00062992650782689452, 7.0519963628612459e-05, 0.00025281222769990563, 0.00017945183208212256, 0.00068885675864294171, 0.00014245540660340339, 0.00026147236349061131, 0.00093538465443998575, 0.00046910785022191703, 4.9840855353977531e-05, 0.00026202935259789228, 0.00020492289331741631, 0.00021813098283018917, 0.00022902082127984613, 0.00032502773683518171, 0.00012197656906209886, 0.00046377774560824037, } };
const TfArray<48, int> quant29_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const ALIGN(16) int8_t tensor_data30[1*3*3*48] = { 
  /* [0][0][][] */ -99,35,-32,-41,-7,-10,16,-7,9,-26,-1,53,-17,-109,-85,3,127,-10,76,37,-89,-51,91,-90,10,-36,-6,93,-27,12,45,127,-18,1,-19,15,-5,-30,-6,20,97,-74,-53,51,88,-106,-16,-5, -20,-127,33,-119,-4,-27,-75,127,82,-89,12,55,4,-127,-127,20,-62,2,-20,-77,-54,5,104,127,29,0,12,127,16,-6,17,-88,-79,42,-9,-14,120,-117,63,-11,-19,-127,-55,17,127,69,46,-33, -29,-11,19,-18,-5,26,13,65,-2,11,-3,27,18,50,-97,15,80,-1,-24,21,-127,60,53,41,0,72,5,-25,-29,5,19,-27,-66,16,-5,20,-41,127,-9,5,84,-53,16,-45,67,36,-18,-6, 
  /* [0][1][][] */ -38,-22,-93,0,-34,23,-1,10,47,-62,-10,-109,-38,-72,-101,104,115,-1,127,81,-41,127,127,113,23,-42,-38,4,26,-46,49,-93,-11,-17,-57,5,-6,-84,46,23,66,119,-35,-5,-62,127,58,-31, -127,57,127,127,127,-127,-127,-19,-10,-127,-127,-127,127,-16,-32,45,16,-127,-119,-127,82,-23,-44,-83,127,-30,127,-43,127,127,-47,77,-127,-127,127,-127,63,-78,-127,-127,11,74,-116,6,-115,-73,127,127, -15,7,23,33,36,125,-15,49,85,5,58,-59,-22,-6,-91,-32,110,45,-27,55,-74,-108,110,-4,12,127,18,12,22,28,127,32,-16,25,55,5,-45,90,59,-14,7,46,127,-21,-47,-57,58,0, 
  /* [0][2][][] */ -42,3,-40,-1,-9,-8,-2,-3,45,11,-1,48,2,-32,75,-3,30,-7,62,12,-51,-15,81,39,1,-38,-14,-73,-11,-24,0,-30,-1,72,-11,-5,-45,29,-5,10,12,-32,-40,-50,-38,22,-55,-37, -12,-32,54,-2,-89,-27,-106,-101,127,62,48,56,3,-63,1,25,97,98,-32,-11,-65,-14,45,-11,-7,-37,-67,-80,-14,-45,72,29,-40,67,-68,-22,-5,-93,39,41,-127,-40,-120,127,22,0,31,-45, 20,-12,27,4,-49,21,19,-102,2,-15,-21,17,17,19,72,-127,83,-24,-22,-3,-60,13,23,19,-14,38,-28,3,-4,-34,7,16,-24,69,-45,-3,-127,105,-16,21,12,-45,49,53,-43,-12,-64,-16, 
};
const TfArray<4, int> tensor_dimension30 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant30_scale = { 48, { 0.0080449562519788742, 0.016302265226840973, 0.0081285992637276649, 0.011417874135077, 0.014100281521677971, 0.022556532174348831, 0.004953229334205389, 0.0086639085784554482, 0.003397857304662466, 0.0084185041487216949, 0.01365248579531908, 0.019546879455447197, 0.013687605038285255, 0.005038456991314888, 0.0057773436419665813, 0.010670327581465244, 0.0025440352037549019, 0.053191028535366058, 0.015833470970392227, 0.0080363443121314049, 0.0047464342787861824, 0.022609787061810493, 0.0053362799808382988, 0.0083706621080636978, 0.0094915060326457024, 0.010274519212543964, 0.014842660166323185, 0.0090345637872815132, 0.02442101389169693, 0.012441212311387062, 0.0082235420122742653, 0.026771876960992813, 0.0029970984905958176, 0.010744519531726837, 0.007626702543348074, 0.029276411980390549, 0.00605435436591506, 0.01111257541924715, 0.039753846824169159, 0.019937083125114441, 0.0021182363852858543, 0.011136246845126152, 0.0087092230096459389, 0.0092705665156245232, 0.0097333844751119614, 0.013813678175210953, 0.005184004083275795, 0.01971055381000042, } };
const TfArray<48, int> quant30_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 3 };
const ALIGN(16) int32_t tensor_data31[48] = { 3434, 1460, 3494, 5924, 353, 7950, 1807, 2296, 2156, 5836, 3283, 6338, 3982, 2890, 2834, -158, 197, -2183, 4925, 2999, 1798, 5748, 7971, 911, 3043, 3985, 2772, 18, -2000, 2405, 8016, 2613, 1062, 796, 742, -577, 931, 1958, -301, 3308, 1383, 5714, 2486, 441, 5049, 1563, -80, 17171, };
const TfArray<1, int> tensor_dimension31 = { 1, { 48 } };
const TfArray<48, float> quant31_scale = { 48, { 0.00024718427448533475, 0.00040699428063817322, 0.00019427838560659438, 0.00016983863315545022, 0.0011675721034407616, 9.8237505881115794e-05, 0.00037468966911546886, 0.00024669725098647177, 0.000266906718024984, 0.00012352640624158084, 0.00022397782595362514, 9.8188422271050513e-05, 0.00021043184096924961, 0.0001483750093029812, 0.00015845279267523438, 0.00016005970246624202, 0.00027014891384169459, 0.00030058171250857413, 0.00018570786050986499, 0.00032665790058672428, 0.00042272542486898601, 0.00013706227764487267, 0.00010276629473082721, 0.00025396663113497198, 0.0001797612349037081, 0.00022021109180059284, 0.00028161340742371976, 0.00022370710212271661, 0.00021991915127728134, 0.00041891168802976608, 0.00012146610970376059, 0.00030302655068226159, 0.00050524907419458032, 0.00027659302577376366, 0.00084397272439673543, 0.00020575828966684639, 0.00015303058899007738, 0.00018832295609172434, 0.00016785466868896037, 0.00022927897225599736, 0.0002881967811845243, 0.0001421322813257575, 0.00016935727035161108, 0.00029147427994757891, 0.00011070477921748534, 0.00036707139224745333, 0.00037973126745782793, 6.1211787397041917e-05, } };
const TfArray<48, int> quant31_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const ALIGN(16) int8_t tensor_data32[48*1*1*8] = { 
  /* [0][0][][] */ -127,-5,40,-103,-119,114,11,-49, 
  /* [1][0][][] */ 82,6,16,-29,-6,52,-127,35, 
  /* [2][0][][] */ -30,40,-127,78,-68,123,11,54, 
  /* [3][0][][] */ 111,-42,-40,92,5,-63,19,127, 
  /* [4][0][][] */ -77,-10,-1,13,-21,-34,127,0, 
  /* [5][0][][] */ 33,115,29,50,-127,-40,-2,-45, 
  /* [6][0][][] */ 6,-62,31,127,8,-92,-18,46, 
  /* [7][0][][] */ 111,-10,127,2,-75,34,77,126, 
  /* [8][0][][] */ -22,-127,37,45,77,-16,-25,-10, 
  /* [9][0][][] */ -96,-109,26,-38,-12,-4,-57,127, 
  /* [10][0][][] */ -21,-127,20,94,55,114,13,-28, 
  /* [11][0][][] */ -117,-127,21,-67,28,55,-30,116, 
  /* [12][0][][] */ 69,-23,88,-70,27,-127,74,7, 
  /* [13][0][][] */ 39,24,28,127,-10,15,37,-63, 
  /* [14][0][][] */ -46,-11,44,-7,127,-13,3,123, 
  /* [15][0][][] */ -115,125,63,72,93,118,-59,127, 
  /* [16][0][][] */ -6,-17,-58,-127,-59,53,13,64, 
  /* [17][0][][] */ 32,127,-6,55,-9,-40,1,34, 
  /* [18][0][][] */ 13,36,-11,-127,-36,-81,18,-14, 
  /* [19][0][][] */ 30,-79,-127,-116,-72,117,18,-5, 
  /* [20][0][][] */ 34,5,7,-2,127,29,34,-40, 
  /* [21][0][][] */ -118,-57,-71,-127,50,51,92,-54, 
  /* [22][0][][] */ -73,-30,66,124,46,-44,-53,127, 
  /* [23][0][][] */ 15,45,-41,122,87,17,11,127, 
  /* [24][0][][] */ 122,-2,-127,-30,-8,-28,32,-62, 
  /* [25][0][][] */ 9,-26,-54,-13,68,-27,-127,-69, 
  /* [26][0][][] */ 127,23,88,-32,-81,43,58,114, 
  /* [27][0][][] */ 31,-47,-64,127,23,8,-34,-103, 
  /* [28][0][][] */ -59,127,84,60,63,-26,-25,5, 
  /* [29][0][][] */ 0,4,51,9,-76,6,127,60, 
  /* [30][0][][] */ -45,-77,40,-59,-65,127,57,31, 
  /* [31][0][][] */ 71,3,76,-1,-78,74,63,127, 
  /* [32][0][][] */ -110,-15,-39,42,-22,34,127,26, 
  /* [33][0][][] */ -127,111,51,80,13,15,-78,21, 
  /* [34][0][][] */ 110,6,22,-20,4,46,-127,20, 
  /* [35][0][][] */ 11,-2,26,29,-47,29,14,-127, 
  /* [36][0][][] */ 10,-15,-56,-109,59,-29,33,127, 
  /* [37][0][][] */ 55,-47,-41,-62,-30,28,60,-127, 
  /* [38][0][][] */ 34,127,42,105,-102,-116,-17,-17, 
  /* [39][0][][] */ 112,8,109,-4,-96,32,127,113, 
  /* [40][0][][] */ -55,-95,127,94,-17,-36,-86,34, 
  /* [41][0][][] */ 19,2,15,30,21,-65,-10,127, 
  /* [42][0][][] */ 38,-71,-99,-66,-81,60,22,-127, 
  /* [43][0][][] */ 108,2,127,-25,-87,-7,112,114, 
  /* [44][0][][] */ -127,-111,-52,88,85,-43,-109,52, 
  /* [45][0][][] */ 127,-14,76,-33,-50,25,-15,78, 
  /* [46][0][][] */ 63,-127,-9,97,120,-3,69,-2, 
  /* [47][0][][] */ 83,121,-28,127,-29,-72,48,-79, 
};
const TfArray<4, int> tensor_dimension32 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant32_scale = { 48, { 0.003611687570810318, 0.0059467223472893238, 0.0028386630583554506, 0.0024815660435706377, 0.017059765756130219, 0.0014353792648762465, 0.005474709440022707, 0.0036045715678483248, 0.0038998585660010576, 0.0018048834754154086, 0.0032726109493523836, 0.0014346621464937925, 0.0030746862757951021, 0.0021679543424397707, 0.0023152038920670748, 0.0023386829998344183, 0.0039472314529120922, 0.0043918946757912636, 0.0027134362608194351, 0.004772902000695467, 0.0061765750870108604, 0.0020026604179292917, 0.0015015508979558945, 0.0037107868120074272, 0.0026265482883900404, 0.0032175739761441946, 0.0041147428564727306, 0.003268655389547348, 0.0032133082859218121, 0.0061208512634038925, 0.0017747797537595034, 0.0044276169501245022, 0.0073823537677526474, 0.0040413881652057171, 0.012331552803516388, 0.0030063996091485023, 0.0022359783761203289, 0.0027516463305801153, 0.0024525776971131563, 0.003350067650899291, 0.0042109345085918903, 0.0020767396781593561, 0.0024745326954871416, 0.0042588231153786182, 0.0016175425844267011, 0.0053633963689208031, 0.0055483737960457802, 0.00089438480790704489, } };
const TfArray<48, int> quant32_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const ALIGN(16) int32_t tensor_data33[8] = { 5845, 4472, 1696, 10322, 3677, 7278, 3438, -3053, };
const TfArray<1, int> tensor_dimension33 = { 1, { 8 } };
const TfArray<8, float> quant33_scale = { 8, { 0.00012072441313648596, 0.00011862740211654454, 0.00013233823119662702, 0.00014390489377547055, 0.00011373341112630442, 0.00010281714639859274, 9.7968324553221464e-05, 0.0002578173007350415, } };
const TfArray<8, int> quant33_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const ALIGN(16) int8_t tensor_data34[8*1*1*48] = { 
  /* [0][0][][] */ -35,37,-27,-3,-42,-24,-78,20,7,25,34,38,34,0,-50,10,-48,41,10,-64,23,37,-127,5,-3,16,-38,42,-12,-6,18,22,12,-25,39,16,3,108,-72,-16,-14,22,-29,33,1,5,16,-8, 
  /* [1][0][][] */ -78,-98,-58,2,88,-25,-127,56,-24,-43,-15,-79,-16,71,11,-11,109,-119,-1,-19,-62,2,0,-32,25,-9,-25,-48,14,-8,-111,-18,17,-63,-82,-96,36,5,-95,-14,3,44,3,83,-12,3,4,36, 
  /* [2][0][][] */ -1,-69,11,50,115,24,87,-11,-37,-22,-18,-46,-4,-33,20,31,-30,-90,39,-64,-7,-64,-55,13,-63,65,60,-98,-40,-9,-60,-41,16,4,-64,-53,-4,127,66,-31,-11,14,-27,-66,36,31,47,-30, 
  /* [3][0][][] */ 6,8,12,-16,34,17,21,-85,28,17,-9,10,6,-102,-15,11,-33,11,-15,-7,-1,53,-127,-2,19,-93,37,34,46,-21,-28,57,8,6,0,-30,-97,-38,5,-21,-4,-6,37,1,-12,4,9,-47, 
  /* [4][0][][] */ 37,-54,11,70,40,1,-31,2,-36,-18,30,-32,83,45,-25,28,-39,-61,70,37,39,-50,127,26,-34,7,-49,-8,2,22,-71,-40,75,-22,-44,-62,-44,-52,-16,1,-65,94,-1,-13,59,89,39,33, 
  /* [5][0][][] */ -65,-27,-29,39,-4,13,-6,-45,-61,-33,-6,-25,7,35,-78,15,127,-16,51,-82,19,-99,-6,6,96,-105,-112,-11,48,-52,24,-70,11,-62,-29,22,-79,-12,16,-34,-46,30,98,54,30,18,27,-43, 
  /* [6][0][][] */ -41,7,-37,36,-24,79,-75,7,-21,-4,-127,7,47,35,126,19,22,6,42,-10,43,-15,-51,-17,9,-5,-70,21,2,-54,7,-21,42,-46,5,7,-7,-6,-62,-27,-30,40,-25,31,33,32,42,0, 
  /* [7][0][][] */ 29,-2,38,-19,6,7,14,-8,15,10,-6,0,-12,-7,-3,-16,13,-5,-26,-16,-22,11,127,15,6,-15,-3,11,4,-7,-23,15,2,21,1,-21,-10,11,4,27,4,-1,5,-1,-17,-1,-24,16, 
};
const TfArray<4, int> tensor_dimension34 = { 4, { 8,1,1,48 } };
const TfArray<8, float> quant34_scale = { 8, { 0.0051307873800396919, 0.0050416644662618637, 0.0056243748404085636, 0.0061159576289355755, 0.0048336698673665524, 0.0043697287328541279, 0.004163653589785099, 0.010957235470414162, } };
const TfArray<8, int> quant34_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const ALIGN(16) int32_t tensor_data35[48] = { 5452, -510, 845, -980, 10462, 4441, -245, 1762, 3485, -1092, -1862, 471, -1036, -1779, -838, -691, 13993, 560, -989, 36822, 2447, 14577, -1636, 3254, 229, -8264, 10980, -472, 175, -294, 2978, 8040, -151, -943, 641, 773, 11265, -718, 4326, -1548, -553, 737, 19075, -7982, 80, -683, -715, -2012, };
const TfArray<1, int> tensor_dimension35 = { 1, { 48 } };
const TfArray<48, float> quant35_scale = { 48, { 5.6567256251582876e-05, 0.00023695683921687305, 0.0014430562732741237, 0.00083664298290386796, 0.00011027704022126272, 0.00016673871141392738, 9.5424846222158521e-05, 0.00045169741497375071, 0.00015936078852973878, 0.00042157972347922623, 4.9153706640936434e-05, 0.00056760449660941958, 0.00077574077295139432, 0.00012190766574349254, 0.00012399579281918705, 0.0069978986866772175, 0.00014286683290265501, 0.00020071958715561777, 0.00075873505556955934, 8.3413557149469852e-05, 0.0010220708791166544, 0.00010487002145964652, 0.00022058730246499181, 0.00015961367171257734, 0.00014536581875290722, 0.00053998455405235291, 0.00010784946061903611, 0.00033394075580872595, 0.0015651196008548141, 0.00051083392463624477, 0.00011254701530560851, 6.8341825681272894e-05, 0.00068779214052483439, 0.00073676236206665635, 0.00019132606394123286, 0.0002631775860209018, 0.00011612478556344286, 6.6027969296555966e-05, 8.3130355051252991e-05, 0.00028501014458015561, 0.00032981313415803015, 0.00042239169124513865, 5.4569602070841938e-05, 0.00015212291327770799, 0.0013593166368082166, 0.00048974086530506611, 0.0041909804567694664, 0.00046985456719994545, } };
const TfArray<48, int> quant35_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const ALIGN(16) int8_t tensor_data36[1*3*3*48] = { 
  /* [0][0][][] */ 127,-37,-74,-85,20,-101,64,-42,84,29,83,47,-91,59,49,-110,69,-97,7,-44,-127,-44,38,110,-16,76,-12,60,-127,14,78,-74,-45,-64,41,73,-127,42,106,80,-37,-127,-63,31,-67,-25,11,-80, 94,-53,69,127,83,32,125,-127,-83,101,57,66,3,48,57,121,71,-99,-106,-75,71,-107,54,-11,96,127,-45,77,17,56,75,-45,45,108,127,127,-96,25,67,-24,92,27,-50,115,127,110,1,-5, 46,-15,-3,-36,31,50,33,-120,-8,53,-87,33,93,-16,-55,5,27,-41,95,-38,25,-5,-83,-103,17,8,-20,31,37,63,27,24,-2,-39,33,34,-24,5,16,-62,-50,107,1,92,-62,-67,4,86, 
  /* [0][1][][] */ 122,72,-127,20,-78,-127,68,-65,109,-68,127,-94,95,81,127,127,-55,107,-7,-81,101,-78,51,125,-13,-4,-31,27,-61,77,61,-127,-127,-71,-21,36,-21,127,127,127,-45,-87,-127,40,1,-16,-121,-127, 118,127,107,-14,-127,7,127,-123,-127,-127,94,-127,39,127,102,-118,-44,127,127,-127,-66,-127,77,-51,55,10,-127,79,15,127,127,-122,113,127,-26,13,-28,117,86,-41,127,-12,-60,127,-6,127,127,52, 45,49,-4,13,-39,71,27,-105,-14,-94,-86,-71,-127,-11,-58,6,31,37,-104,-57,-55,-10,-127,-127,-33,3,-81,26,41,82,23,6,9,-55,-5,5,-9,31,30,-81,-60,86,-7,120,12,-73,8,107, 
  /* [0][2][][] */ 26,-40,-21,-3,53,-30,6,-16,78,32,55,42,8,34,-3,-9,-127,-29,3,-16,14,-33,13,49,83,-18,-17,-89,29,21,-5,-85,-20,-39,-75,-14,65,47,42,74,-99,-61,-109,19,-1,-7,97,-61, 3,-63,12,1,40,-2,27,-67,-96,70,24,56,-21,57,3,18,-94,-33,-10,-52,-28,-61,32,-17,127,-15,-43,-127,18,41,8,-69,33,81,-64,15,73,52,22,-18,-65,-1,-62,121,-7,-12,-93,69, 4,-24,21,8,7,15,14,-62,-16,53,-5,28,20,-23,-10,5,24,-19,22,-37,8,8,-40,-68,4,-9,-14,-43,8,33,0,11,2,-30,-45,-2,60,22,-1,-38,-109,50,-42,71,2,-1,10,20, 
};
const TfArray<4, int> tensor_dimension36 = { 4, { 1,3,3,48 } };
const TfArray<48, float> quant36_scale = { 48, { 0.0024041084107011557, 0.010070665739476681, 0.061329890042543411, 0.035557325929403305, 0.0046867742203176022, 0.0070863952860236168, 0.0040555559098720551, 0.019197139889001846, 0.0067728334106504917, 0.01791713759303093, 0.0020890324376523495, 0.024123189970850945, 0.032968983054161072, 0.0051810755394399166, 0.0052698208019137383, 0.29741069674491882, 0.006071840412914753, 0.0085305823013186455, 0.032246239483356476, 0.0035450761206448078, 0.043438013643026352, 0.0044569759629666805, 0.0093749603256583214, 0.0067835808731615543, 0.0061780470423400402, 0.022949343547224998, 0.0045836018398404121, 0.014192482456564903, 0.066517584025859833, 0.021710442379117012, 0.0047832480631768703, 0.0029045275878161192, 0.02923116460442543, 0.031312398612499237, 0.008131357841193676, 0.011185047216713428, 0.0049353032372891903, 0.0028061887715011835, 0.0035330401733517647, 0.012112930417060852, 0.014017058536410332, 0.017951646819710732, 0.002319208113476634, 0.0064652236178517342, 0.057770956307649612, 0.020813986659049988, 0.17811666429042816, 0.019968818873167038, } };
const TfArray<48, int> quant36_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 3 };
const ALIGN(16) int32_t tensor_data37[48] = { -2210, -11178, 13399, 5355, 12809, 4212, 3611, 762, -1923, -9017, 797, 4977, 18914, -14209, -25, 8115, -9211, 539, 6270, 9698, 9435, 4211, 3229, 435, 15539, 26882, 12539, -15248, 1654, -1711, 211, -3385, 23579, 9532, 13185, -1544, -14464, 415, -4406, -425, -15802, -12455, -4437, 3986, 8737, -14677, 7808, -2065, };
const TfArray<1, int> tensor_dimension37 = { 1, { 48 } };
const TfArray<48, float> quant37_scale = { 48, { 0.0002353606978431344, 0.00022584304679185152, 6.6368353145662695e-05, 0.00016814230184536427, 0.00024505742476321757, 0.00061178271425887942, 0.00080120586790144444, 0.00039251116686500609, 0.00053632172057405114, 0.00037725642323493958, 0.0014306950615718961, 0.00023138920369092375, 8.5556363046634942e-05, 0.00030902487924322486, 0.00057318888138979673, 4.2460524127818644e-05, 0.00023272277030628175, 0.00029336023726500571, 0.00016955476894509047, 0.00017343228682875633, 0.0001056340552167967, 0.0010610964382067323, 0.0002272210840601474, 0.00075991242192685604, 0.00017133493383880705, 7.7559474448207766e-05, 0.00032145367003977299, 0.00022875826107338071, 0.00067717954516410828, 0.0003871613007504493, 0.00060545181622728705, 0.0010011683916673064, 9.2342488642316312e-05, 0.00025953314616344869, 0.00022110922145657241, 0.00044411449925974011, 0.00030201004119589925, 0.00030400071409530938, 0.00073601969052106142, 0.00027107028290629387, 0.00025731258210726082, 0.0002046310983132571, 0.00024080053844954818, 0.00023466859420295805, 9.9699303973466158e-05, 0.00023014265752863139, 4.8588870413368568e-05, 0.00047698177513666451, } };
const TfArray<48, int> quant37_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const ALIGN(16) int8_t tensor_data38[48*1*1*8] = { 
  /* [0][0][][] */ 16,45,14,-25,92,-19,127,8, 
  /* [1][0][][] */ 127,57,82,14,4,-29,16,113, 
  /* [2][0][][] */ -63,16,-7,127,11,-18,-32,57, 
  /* [3][0][][] */ 53,-39,-121,-6,-6,-41,14,127, 
  /* [4][0][][] */ -106,69,-127,-12,21,32,-41,-45, 
  /* [5][0][][] */ 124,-15,-9,-51,-4,-36,0,-127, 
  /* [6][0][][] */ 5,-8,-4,2,-127,-27,55,7, 
  /* [7][0][][] */ -5,-54,-6,0,-30,-1,-127,-5, 
  /* [8][0][][] */ -17,14,37,-5,127,17,-67,-18, 
  /* [9][0][][] */ 127,-44,11,3,6,-29,54,104, 
  /* [10][0][][] */ 123,5,-8,-38,3,16,1,-127, 
  /* [11][0][][] */ -52,6,1,127,-8,-51,-45,40, 
  /* [12][0][][] */ -113,5,-65,-11,7,93,-47,-127, 
  /* [13][0][][] */ 114,7,127,10,-5,24,30,40, 
  /* [14][0][][] */ -127,-9,17,14,-3,-11,7,124, 
  /* [15][0][][] */ -125,14,-5,127,4,-8,-26,123, 
  /* [16][0][][] */ 68,-66,127,59,-19,-100,23,68, 
  /* [17][0][][] */ 16,-55,-90,127,-6,19,-11,118, 
  /* [18][0][][] */ 9,-22,-127,33,-29,-7,25,121, 
  /* [19][0][][] */ 21,11,-15,127,-17,-1,-84,-51, 
  /* [20][0][][] */ 29,35,119,-127,9,-66,2,-106, 
  /* [21][0][][] */ 0,-1,-10,-1,-127,-12,52,-3, 
  /* [22][0][][] */ 7,60,3,-6,6,127,-10,6, 
  /* [23][0][][] */ 119,32,-8,101,5,-4,-41,-127, 
  /* [24][0][][] */ -127,36,-110,-39,16,-41,-55,-73, 
  /* [25][0][][] */ -47,-13,-52,-54,5,-127,7,-37, 
  /* [26][0][][] */ -96,-21,-127,7,4,8,-23,-39, 
  /* [27][0][][] */ 119,0,127,16,-1,55,29,40, 
  /* [28][0][][] */ 9,-60,-16,44,30,-127,8,15, 
  /* [29][0][][] */ 3,-2,38,-127,-13,-19,22,5, 
  /* [30][0][][] */ -49,11,127,0,4,1,-2,-125, 
  /* [31][0][][] */ -6,15,-1,6,127,23,-53,-6, 
  /* [32][0][][] */ -127,-29,-105,-17,-9,-24,-31,-56, 
  /* [33][0][][] */ 7,-71,-3,-48,28,-127,4,-16, 
  /* [34][0][][] */ -47,-127,-119,66,3,-44,-4,-20, 
  /* [35][0][][] */ 54,13,-122,5,4,-6,9,127, 
  /* [36][0][][] */ 83,26,88,30,12,127,17,33, 
  /* [37][0][][] */ -10,16,-2,127,2,-18,-16,9, 
  /* [38][0][][] */ 1,27,8,2,127,22,-39,0, 
  /* [39][0][][] */ -6,16,-5,29,-37,127,-92,-3, 
  /* [40][0][][] */ 123,-6,127,26,-17,18,34,58, 
  /* [41][0][][] */ 127,-8,116,24,-14,21,39,51, 
  /* [42][0][][] */ 79,-61,7,-36,37,127,17,-12, 
  /* [43][0][][] */ -7,-65,-11,1,-48,-14,-127,-3, 
  /* [44][0][][] */ -11,-127,50,90,19,42,8,-105, 
  /* [45][0][][] */ 127,9,126,-5,-9,35,21,49, 
  /* [46][0][][] */ -85,12,-2,127,-1,7,-45,65, 
  /* [47][0][][] */ -1,44,-7,-5,-3,127,-17,6, 
};
const TfArray<4, int> tensor_dimension38 = { 4, { 48,1,1,8 } };
const TfArray<48, float> quant38_scale = { 48, { 0.0031121645588427782, 0.0029863130766898394, 0.00087758596055209637, 0.0022233384661376476, 0.0032403839286416769, 0.0080895768478512764, 0.01059431117027998, 0.0051901587285101414, 0.0070917597040534019, 0.0049884459003806114, 0.018918020650744438, 0.0030596496071666479, 0.0011313081486150622, 0.0040862229652702808, 0.0075792521238327026, 0.00056145369308069348, 0.0030772832687944174, 0.0038790900725871325, 0.0022420154418796301, 0.0022932877764105797, 0.001396794687025249, 0.014030832797288895, 0.0030045348685234785, 0.010048289783298969, 0.0022655546199530363, 0.001025565667077899, 0.0042505683377385139, 0.0030248607508838177, 0.0089543163776397705, 0.0051194173283874989, 0.0080058639869093895, 0.013238406740128994, 0.0012210408458486199, 0.0034317956306040287, 0.0029237179551273584, 0.0058725071139633656, 0.003993466030806303, 0.0040197884663939476, 0.0097323572263121605, 0.0035843506921082735, 0.0034024333581328392, 0.0027058282867074013, 0.0031840952578932047, 0.0031030129175633192, 0.0013183197006583214, 0.0030431665945798159, 0.00064248859416693449, 0.0063071097247302532, } };
const TfArray<48, int> quant38_zero = { 48, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const ALIGN(16) int32_t tensor_data39[8] = { 1346, 739, -1137, -9057, -96, -2129, -674, 4076, };
const TfArray<1, int> tensor_dimension39 = { 1, { 8 } };
const TfArray<8, float> quant39_scale = { 8, { 0.00022857241856399924, 0.00023209238133858889, 0.00037075934233143926, 0.00015468100900761783, 0.00026187030016444623, 0.00012259998766239733, 0.00032233749516308308, 0.00022029594401828945, } };
const TfArray<8, int> quant39_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const ALIGN(16) int8_t tensor_data40[8*1*1*8] = { 
  /* [0][0][][] */ -9,-15,-18,13,-12,-127,7,40, 
  /* [1][0][][] */ -55,32,-121,127,4,59,-19,35, 
  /* [2][0][][] */ 6,-2,29,3,-14,-127,8,26, 
  /* [3][0][][] */ 21,52,58,127,22,-44,-37,-16, 
  /* [4][0][][] */ 16,53,24,-17,-127,-12,23,-1, 
  /* [5][0][][] */ 62,-19,127,-92,13,-60,-16,-37, 
  /* [6][0][][] */ 34,127,50,-39,37,-12,-62,-25, 
  /* [7][0][][] */ -25,-23,-40,-18,-9,-127,24,41, 
};
const TfArray<4, int> tensor_dimension40 = { 4, { 8,1,1,8 } };
const TfArray<8, float> quant40_scale = { 8, { 0.0097143277525901794, 0.0098639260977506638, 0.015757272019982338, 0.006573942955583334, 0.011129487305879593, 0.0052104992792010307, 0.013699343428015709, 0.009362577460706234, } };
const TfArray<8, int> quant40_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const ALIGN(16) int32_t tensor_data41[8] = { 8897, -89, 1066, 993, 13158, -1005, -431, 20443, };
const TfArray<1, int> tensor_dimension41 = { 1, { 8 } };
const TfArray<8, float> quant41_scale = { 8, { 8.1934915215242654e-05, 0.00045351224252954125, 0.00015867187175899744, 0.00058124691713601351, 0.00016008918464649469, 0.00023219261493068188, 0.00088591594249010086, 6.8405068304855376e-05, } };
const TfArray<8, int> quant41_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const ALIGN(16) int8_t tensor_data42[1*3*3*8] = { 
  /* [0][0][][] */ -22,-2,5,-2,-2,28,3,-19, 11,-4,2,-9,3,127,16,127, 3,0,2,-10,-8,19,9,-13, 
  /* [0][1][][] */ 8,-127,-3,6,-14,-4,-101,-25, -127,100,-72,127,-127,-8,127,-63, 13,-2,-7,-64,-5,5,54,-52, 
  /* [0][2][][] */ 19,-1,5,-1,-2,-22,11,-15, 60,-4,127,-19,8,-114,7,11, 11,0,-6,-6,-3,-18,1,-15, 
};
const TfArray<4, int> tensor_dimension42 = { 4, { 1,3,3,8 } };
const TfArray<8, float> quant42_scale = { 8, { 0.0034822337329387665, 0.019274270161986351, 0.0067435544915497303, 0.024702994152903557, 0.0068037901073694229, 0.009868185967206955, 0.037651427090167999, 0.0029072153847664595, } };
const TfArray<8, int> quant42_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant42 = { (TfLiteFloatArray*)&quant42_scale, (TfLiteIntArray*)&quant42_zero, 3 };
const ALIGN(16) int32_t tensor_data43[8] = { 65098, -3796, 35615, 21058, 12981, 464047, 242396, 41059, };
const TfArray<1, int> tensor_dimension43 = { 1, { 8 } };
const TfArray<8, float> quant43_scale = { 8, { 5.2711351600009948e-05, 5.0518916395958513e-05, 0.0001057883637258783, 2.8518232284113765e-05, 0.00012570200487971306, 7.7454951679101214e-06, 9.5145514933392406e-07, 6.7286404373589903e-05, } };
const TfArray<8, int> quant43_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant43 = { (TfLiteFloatArray*)&quant43_scale, (TfLiteIntArray*)&quant43_zero, 0 };
const ALIGN(16) int8_t tensor_data44[8*3*3*3] = { 
  /* [0][0][][] */ 7,-5,12, 7,-24,30, 11,-25,20, 
  /* [0][1][][] */ 38,28,26, 65,18,59, 23,-33,38, 
  /* [0][2][][] */ -22,-93,-12, -30,-127,0, -9,-56,18, 
  /* [1][0][][] */ 29,77,27, 3,10,0, -33,-68,-24, 
  /* [1][1][][] */ 51,123,41, 0,1,-1, -57,-127,-38, 
  /* [1][2][][] */ 28,47,13, 3,1,2, -34,-52,-2, 
  /* [2][0][][] */ 42,92,12, 52,127,15, 14,42,0, 
  /* [2][1][][] */ -47,-81,-25, -81,-91,-35, -33,-7,-20, 
  /* [2][2][][] */ -1,11,8, 3,16,0, -3,8,-9, 
  /* [3][0][][] */ 45,-31,-15, 78,-36,-38, 29,-18,-13, 
  /* [3][1][][] */ 82,-53,-34, 127,-54,-72, 56,-31,-31, 
  /* [3][2][][] */ 23,-17,-1, 44,-26,-14, 18,-9,1, 
  /* [4][0][][] */ -12,-23,-4, 28,45,10, -15,-28,-3, 
  /* [4][1][][] */ -28,-59,-9, 64,127,19, -34,-61,-7, 
  /* [4][2][][] */ -9,-12,4, 22,25,-2, -11,-12,-1, 
  /* [5][0][][] */ -42,-57,-24, -52,-78,-36, -50,-36,-19, 
  /* [5][1][][] */ -70,-108,-36, -90,-127,-44, -61,-46,-22, 
  /* [5][2][][] */ -10,-5,-15, -9,-8,-8, -10,2,0, 
  /* [6][0][][] */ 100,10,-27, 2,-14,21, -61,-12,25, 
  /* [6][1][][] */ 127,39,-36, -9,-14,34, -102,-11,36, 
  /* [6][2][][] */ 51,17,-12, -12,12,7, -32,16,-26, 
  /* [7][0][][] */ -4,17,0, -15,22,-6, -6,21,-7, 
  /* [7][1][][] */ 19,85,-4, 23,127,-22, -2,60,-27, 
  /* [7][2][][] */ -27,-50,-19, -42,-52,-33, -19,4,-19, 
};
const TfArray<4, int> tensor_dimension44 = { 4, { 8,3,3,3 } };
const TfArray<8, float> quant44_scale = { 8, { 0.013441394083201885, 0.012882323004305363, 0.026976030319929123, 0.0072721489705145359, 0.032054010778665543, 0.0019751011859625578, 0.00024262105580419302, 0.017158031463623047, } };
const TfArray<8, int> quant44_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant44 = { (TfLiteFloatArray*)&quant44_scale, (TfLiteIntArray*)&quant44_zero, 0 };
const TfArray<4, int> tensor_dimension45 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant45_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant45_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant45 = { (TfLiteFloatArray*)&quant45_scale, (TfLiteIntArray*)&quant45_zero, 0 };
const TfArray<4, int> tensor_dimension46 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant46_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant46_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant46 = { (TfLiteFloatArray*)&quant46_scale, (TfLiteIntArray*)&quant46_zero, 0 };
const TfArray<4, int> tensor_dimension47 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant47_scale = { 1, { 0.082506760954856873, } };
const TfArray<1, int> quant47_zero = { 1, { -5 } };
const TfLiteAffineQuantization quant47 = { (TfLiteFloatArray*)&quant47_scale, (TfLiteIntArray*)&quant47_zero, 0 };
const TfArray<4, int> tensor_dimension48 = { 4, { 1,30,30,8 } };
const TfArray<1, float> quant48_scale = { 1, { 0.07562604546546936, } };
const TfArray<1, int> quant48_zero = { 1, { -41 } };
const TfLiteAffineQuantization quant48 = { (TfLiteFloatArray*)&quant48_scale, (TfLiteIntArray*)&quant48_zero, 0 };
const TfArray<4, int> tensor_dimension49 = { 4, { 1,30,30,48 } };
const TfArray<1, float> quant49_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant49_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant49 = { (TfLiteFloatArray*)&quant49_scale, (TfLiteIntArray*)&quant49_zero, 0 };
const TfArray<4, int> tensor_dimension50 = { 4, { 1,31,31,48 } };
const TfArray<1, float> quant50_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant50_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant50 = { (TfLiteFloatArray*)&quant50_scale, (TfLiteIntArray*)&quant50_zero, 0 };
const TfArray<4, int> tensor_dimension51 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant51_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant51_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant51 = { (TfLiteFloatArray*)&quant51_scale, (TfLiteIntArray*)&quant51_zero, 0 };
const TfArray<4, int> tensor_dimension52 = { 4, { 1,15,15,8 } };
const TfArray<1, float> quant52_scale = { 1, { 0.06844010204076767, } };
const TfArray<1, int> quant52_zero = { 1, { -18 } };
const TfLiteAffineQuantization quant52 = { (TfLiteFloatArray*)&quant52_scale, (TfLiteIntArray*)&quant52_zero, 0 };
const TfArray<4, int> tensor_dimension53 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant53_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant53_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant53 = { (TfLiteFloatArray*)&quant53_scale, (TfLiteIntArray*)&quant53_zero, 0 };
const TfArray<4, int> tensor_dimension54 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant54_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant54_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant54 = { (TfLiteFloatArray*)&quant54_scale, (TfLiteIntArray*)&quant54_zero, 0 };
const TfArray<4, int> tensor_dimension55 = { 4, { 1,15,15,8 } };
const TfArray<1, float> quant55_scale = { 1, { 0.050904780626296997, } };
const TfArray<1, int> quant55_zero = { 1, { 11 } };
const TfLiteAffineQuantization quant55 = { (TfLiteFloatArray*)&quant55_scale, (TfLiteIntArray*)&quant55_zero, 0 };
const TfArray<4, int> tensor_dimension56 = { 4, { 1,15,15,8 } };
const TfArray<1, float> quant56_scale = { 1, { 0.066772490739822388, } };
const TfArray<1, int> quant56_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant56 = { (TfLiteFloatArray*)&quant56_scale, (TfLiteIntArray*)&quant56_zero, 0 };
const TfArray<4, int> tensor_dimension57 = { 4, { 1,15,15,48 } };
const TfArray<1, float> quant57_scale = { 1, { 0.022894943132996559, } };
const TfArray<1, int> quant57_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant57 = { (TfLiteFloatArray*)&quant57_scale, (TfLiteIntArray*)&quant57_zero, 0 };
const TfArray<4, int> tensor_dimension58 = { 4, { 1,17,17,48 } };
const TfArray<1, float> quant58_scale = { 1, { 0.022894943132996559, } };
const TfArray<1, int> quant58_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant58 = { (TfLiteFloatArray*)&quant58_scale, (TfLiteIntArray*)&quant58_zero, 0 };
const TfArray<4, int> tensor_dimension59 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant59_scale = { 1, { 0.020265497267246246, } };
const TfArray<1, int> quant59_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant59 = { (TfLiteFloatArray*)&quant59_scale, (TfLiteIntArray*)&quant59_zero, 0 };
const TfArray<4, int> tensor_dimension60 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant60_scale = { 1, { 0.052826322615146637, } };
const TfArray<1, int> quant60_zero = { 1, { -13 } };
const TfLiteAffineQuantization quant60 = { (TfLiteFloatArray*)&quant60_scale, (TfLiteIntArray*)&quant60_zero, 0 };
const TfArray<4, int> tensor_dimension61 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant61_scale = { 1, { 0.019129965454339981, } };
const TfArray<1, int> quant61_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant61 = { (TfLiteFloatArray*)&quant61_scale, (TfLiteIntArray*)&quant61_zero, 0 };
const TfArray<4, int> tensor_dimension62 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant62_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant62_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant62 = { (TfLiteFloatArray*)&quant62_scale, (TfLiteIntArray*)&quant62_zero, 0 };
const TfArray<4, int> tensor_dimension63 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant63_scale = { 1, { 0.026074929162859917, } };
const TfArray<1, int> quant63_zero = { 1, { 17 } };
const TfLiteAffineQuantization quant63 = { (TfLiteFloatArray*)&quant63_scale, (TfLiteIntArray*)&quant63_zero, 0 };
const TfArray<4, int> tensor_dimension64 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant64_scale = { 1, { 0.059328094124794006, } };
const TfArray<1, int> quant64_zero = { 1, { -3 } };
const TfLiteAffineQuantization quant64 = { (TfLiteFloatArray*)&quant64_scale, (TfLiteIntArray*)&quant64_zero, 0 };
const TfArray<4, int> tensor_dimension65 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant65_scale = { 1, { 0.023529412224888802, } };
const TfArray<1, int> quant65_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant65 = { (TfLiteFloatArray*)&quant65_scale, (TfLiteIntArray*)&quant65_zero, 0 };
const TfArray<4, int> tensor_dimension66 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant66_scale = { 1, { 0.020473171025514603, } };
const TfArray<1, int> quant66_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant66 = { (TfLiteFloatArray*)&quant66_scale, (TfLiteIntArray*)&quant66_zero, 0 };
const TfArray<4, int> tensor_dimension67 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant67_scale = { 1, { 0.036788385361433029, } };
const TfArray<1, int> quant67_zero = { 1, { 28 } };
const TfLiteAffineQuantization quant67 = { (TfLiteFloatArray*)&quant67_scale, (TfLiteIntArray*)&quant67_zero, 0 };
const TfArray<4, int> tensor_dimension68 = { 4, { 1,8,8,8 } };
const TfArray<1, float> quant68_scale = { 1, { 0.065661422908306122, } };
const TfArray<1, int> quant68_zero = { 1, { -4 } };
const TfLiteAffineQuantization quant68 = { (TfLiteFloatArray*)&quant68_scale, (TfLiteIntArray*)&quant68_zero, 0 };
const TfArray<4, int> tensor_dimension69 = { 4, { 1,8,8,48 } };
const TfArray<1, float> quant69_scale = { 1, { 0.017111465334892273, } };
const TfArray<1, int> quant69_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant69 = { (TfLiteFloatArray*)&quant69_scale, (TfLiteIntArray*)&quant69_zero, 0 };
const TfArray<4, int> tensor_dimension70 = { 4, { 1,8,8,32 } };
const TfArray<1, float> quant70_scale = { 1, { 0.036672893911600113, } };
const TfArray<1, int> quant70_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant70 = { (TfLiteFloatArray*)&quant70_scale, (TfLiteIntArray*)&quant70_zero, 0 };
const TfArray<4, int> tensor_dimension71 = { 4, { 1,8,8,2 } };
const TfArray<1, float> quant71_scale = { 1, { 0.11477488279342651, } };
const TfArray<1, int> quant71_zero = { 1, { -8 } };
const TfLiteAffineQuantization quant71 = { (TfLiteFloatArray*)&quant71_scale, (TfLiteIntArray*)&quant71_zero, 0 };
const TfArray<4, int> tensor_dimension72 = { 4, { 1,8,8,2 } };
const TfArray<1, float> quant72_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant72_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant72 = { (TfLiteFloatArray*)&quant72_scale, (TfLiteIntArray*)&quant72_zero, 0 };
const TfLiteConvParams opdata0 = { kTfLitePaddingSame, 2,2, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs0 = { 3, { 0,44,43 } };
const TfArray<1, int> outputs0 = { 1, { 45 } };
const TfLiteDepthwiseConvParams opdata1 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 45,42,41 } };
const TfArray<1, int> outputs1 = { 1, { 46 } };
const TfLiteConvParams opdata2 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs2 = { 3, { 46,40,39 } };
const TfArray<1, int> outputs2 = { 1, { 47 } };
const TfLiteAddParams opdata3 = { kTfLiteActNone };
const TfArray<2, int> inputs3 = { 2, { 45,47 } };
const TfArray<1, int> outputs3 = { 1, { 48 } };
const TfLiteConvParams opdata4 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs4 = { 3, { 48,38,37 } };
const TfArray<1, int> outputs4 = { 1, { 49 } };
const TfArray<2, int> inputs5 = { 2, { 49,1 } };
const TfArray<1, int> outputs5 = { 1, { 50 } };
const TfLiteDepthwiseConvParams opdata6 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs6 = { 3, { 50,36,35 } };
const TfArray<1, int> outputs6 = { 1, { 51 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 51,34,33 } };
const TfArray<1, int> outputs7 = { 1, { 52 } };
const TfLiteConvParams opdata8 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs8 = { 3, { 52,32,31 } };
const TfArray<1, int> outputs8 = { 1, { 53 } };
const TfLiteDepthwiseConvParams opdata9 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs9 = { 3, { 53,30,29 } };
const TfArray<1, int> outputs9 = { 1, { 54 } };
const TfLiteConvParams opdata10 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs10 = { 3, { 54,28,27 } };
const TfArray<1, int> outputs10 = { 1, { 55 } };
const TfLiteAddParams opdata11 = { kTfLiteActNone };
const TfArray<2, int> inputs11 = { 2, { 52,55 } };
const TfArray<1, int> outputs11 = { 1, { 56 } };
const TfLiteConvParams opdata12 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs12 = { 3, { 56,26,25 } };
const TfArray<1, int> outputs12 = { 1, { 57 } };
const TfArray<2, int> inputs13 = { 2, { 57,2 } };
const TfArray<1, int> outputs13 = { 1, { 58 } };
const TfLiteDepthwiseConvParams opdata14 = { kTfLitePaddingValid, 2,2, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs14 = { 3, { 58,24,23 } };
const TfArray<1, int> outputs14 = { 1, { 59 } };
const TfLiteConvParams opdata15 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs15 = { 3, { 59,22,21 } };
const TfArray<1, int> outputs15 = { 1, { 60 } };
const TfLiteConvParams opdata16 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs16 = { 3, { 60,20,19 } };
const TfArray<1, int> outputs16 = { 1, { 61 } };
const TfLiteDepthwiseConvParams opdata17 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs17 = { 3, { 61,18,17 } };
const TfArray<1, int> outputs17 = { 1, { 62 } };
const TfLiteConvParams opdata18 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs18 = { 3, { 62,16,15 } };
const TfArray<1, int> outputs18 = { 1, { 63 } };
const TfLiteAddParams opdata19 = { kTfLiteActNone };
const TfArray<2, int> inputs19 = { 2, { 60,63 } };
const TfArray<1, int> outputs19 = { 1, { 64 } };
const TfLiteConvParams opdata20 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs20 = { 3, { 64,14,13 } };
const TfArray<1, int> outputs20 = { 1, { 65 } };
const TfLiteDepthwiseConvParams opdata21 = { kTfLitePaddingSame, 1,1, 1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs21 = { 3, { 65,12,11 } };
const TfArray<1, int> outputs21 = { 1, { 66 } };
const TfLiteConvParams opdata22 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs22 = { 3, { 66,10,9 } };
const TfArray<1, int> outputs22 = { 1, { 67 } };
const TfLiteAddParams opdata23 = { kTfLiteActNone };
const TfArray<2, int> inputs23 = { 2, { 64,67 } };
const TfArray<1, int> outputs23 = { 1, { 68 } };
const TfLiteConvParams opdata24 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu6, 1,1 };
const TfArray<3, int> inputs24 = { 3, { 68,8,7 } };
const TfArray<1, int> outputs24 = { 1, { 69 } };
const TfLiteConvParams opdata25 = { kTfLitePaddingValid, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs25 = { 3, { 69,6,5 } };
const TfArray<1, int> outputs25 = { 1, { 70 } };
const TfLiteConvParams opdata26 = { kTfLitePaddingValid, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs26 = { 3, { 70,4,3 } };
const TfArray<1, int> outputs26 = { 1, { 71 } };
const TfLiteSoftmaxParams opdata27 = { 1 };
const TfArray<1, int> inputs27 = { 1, { 71 } };
const TfArray<1, int> outputs27 = { 1, { 72 } };
};

TensorInfo_t tensorData[] = {
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension0, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant0))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data1, (TfLiteIntArray*)&g0::tensor_dimension1, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data2, (TfLiteIntArray*)&g0::tensor_dimension2, 32, {kTfLiteNoQuantization, nullptr}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data3, (TfLiteIntArray*)&g0::tensor_dimension3, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant3))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data4, (TfLiteIntArray*)&g0::tensor_dimension4, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant4))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data5, (TfLiteIntArray*)&g0::tensor_dimension5, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant5))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data6, (TfLiteIntArray*)&g0::tensor_dimension6, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant6))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data7, (TfLiteIntArray*)&g0::tensor_dimension7, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant7))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data8, (TfLiteIntArray*)&g0::tensor_dimension8, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant8))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data9, (TfLiteIntArray*)&g0::tensor_dimension9, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant9))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data10, (TfLiteIntArray*)&g0::tensor_dimension10, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant10))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data11, (TfLiteIntArray*)&g0::tensor_dimension11, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant11))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data12, (TfLiteIntArray*)&g0::tensor_dimension12, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant12))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data13, (TfLiteIntArray*)&g0::tensor_dimension13, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant13))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data14, (TfLiteIntArray*)&g0::tensor_dimension14, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant14))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data15, (TfLiteIntArray*)&g0::tensor_dimension15, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant15))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data16, (TfLiteIntArray*)&g0::tensor_dimension16, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant16))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data17, (TfLiteIntArray*)&g0::tensor_dimension17, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant17))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data18, (TfLiteIntArray*)&g0::tensor_dimension18, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant18))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data19, (TfLiteIntArray*)&g0::tensor_dimension19, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant19))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data20, (TfLiteIntArray*)&g0::tensor_dimension20, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant20))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data21, (TfLiteIntArray*)&g0::tensor_dimension21, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant21))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data22, (TfLiteIntArray*)&g0::tensor_dimension22, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant22))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data23, (TfLiteIntArray*)&g0::tensor_dimension23, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant23))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data24, (TfLiteIntArray*)&g0::tensor_dimension24, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant24))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data25, (TfLiteIntArray*)&g0::tensor_dimension25, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant25))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data26, (TfLiteIntArray*)&g0::tensor_dimension26, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant26))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data27, (TfLiteIntArray*)&g0::tensor_dimension27, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant27))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data28, (TfLiteIntArray*)&g0::tensor_dimension28, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant28))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data29, (TfLiteIntArray*)&g0::tensor_dimension29, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant29))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data30, (TfLiteIntArray*)&g0::tensor_dimension30, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant30))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data31, (TfLiteIntArray*)&g0::tensor_dimension31, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant31))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data32, (TfLiteIntArray*)&g0::tensor_dimension32, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant32))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data33, (TfLiteIntArray*)&g0::tensor_dimension33, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant33))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data34, (TfLiteIntArray*)&g0::tensor_dimension34, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant34))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data35, (TfLiteIntArray*)&g0::tensor_dimension35, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant35))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data36, (TfLiteIntArray*)&g0::tensor_dimension36, 432, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant36))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data37, (TfLiteIntArray*)&g0::tensor_dimension37, 192, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant37))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data38, (TfLiteIntArray*)&g0::tensor_dimension38, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant38))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data39, (TfLiteIntArray*)&g0::tensor_dimension39, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant39))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data40, (TfLiteIntArray*)&g0::tensor_dimension40, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant40))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data41, (TfLiteIntArray*)&g0::tensor_dimension41, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant41))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data42, (TfLiteIntArray*)&g0::tensor_dimension42, 72, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant42))}, },
{ kTfLiteMmapRo, kTfLiteInt32, (int32_t*)g0::tensor_data43, (TfLiteIntArray*)&g0::tensor_dimension43, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant43))}, },
{ kTfLiteMmapRo, kTfLiteInt8, (int32_t*)g0::tensor_data44, (TfLiteIntArray*)&g0::tensor_dimension44, 216, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant44))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 14400), (TfLiteIntArray*)&g0::tensor_dimension45, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant45))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension46, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant46))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7200), (TfLiteIntArray*)&g0::tensor_dimension47, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant47))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension48, 7200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant48))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 46128), (TfLiteIntArray*)&g0::tensor_dimension49, 43200, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant49))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension50, 46128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant50))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 46128), (TfLiteIntArray*)&g0::tensor_dimension51, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant51))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 21600), (TfLiteIntArray*)&g0::tensor_dimension52, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant52))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 10800), (TfLiteIntArray*)&g0::tensor_dimension53, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant53))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension54, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant54))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 10800), (TfLiteIntArray*)&g0::tensor_dimension55, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant55))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension56, 1800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant56))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13872), (TfLiteIntArray*)&g0::tensor_dimension57, 10800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant57))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension58, 13872, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant58))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 13872), (TfLiteIntArray*)&g0::tensor_dimension59, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant59))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7520), (TfLiteIntArray*)&g0::tensor_dimension60, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant60))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension61, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant61))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension62, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant62))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension63, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant63))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 7008), (TfLiteIntArray*)&g0::tensor_dimension64, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant64))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension65, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant65))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension66, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant66))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3584), (TfLiteIntArray*)&g0::tensor_dimension67, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant67))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension68, 512, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant68))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension69, 3072, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant69))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 3072), (TfLiteIntArray*)&g0::tensor_dimension70, 2048, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant70))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 128), (TfLiteIntArray*)&g0::tensor_dimension71, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant71))}, },
{ kTfLiteArenaRw, kTfLiteInt8, (int32_t*)(tensor_arena + 0), (TfLiteIntArray*)&g0::tensor_dimension72, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&g0::quant72))}, },
};

#ifndef TF_LITE_STATIC_MEMORY
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#else
TfLiteNode tflNodes[28] = {
{ (TfLiteIntArray*)&g0::inputs0, (TfLiteIntArray*)&g0::outputs0, (TfLiteIntArray*)&g0::inputs0, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata0)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs1, (TfLiteIntArray*)&g0::outputs1, (TfLiteIntArray*)&g0::inputs1, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata1)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs2, (TfLiteIntArray*)&g0::outputs2, (TfLiteIntArray*)&g0::inputs2, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata2)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs3, (TfLiteIntArray*)&g0::outputs3, (TfLiteIntArray*)&g0::inputs3, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata3)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs4, (TfLiteIntArray*)&g0::outputs4, (TfLiteIntArray*)&g0::inputs4, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata4)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs5, (TfLiteIntArray*)&g0::outputs5, (TfLiteIntArray*)&g0::inputs5, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs6, (TfLiteIntArray*)&g0::outputs6, (TfLiteIntArray*)&g0::inputs6, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata6)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs7, (TfLiteIntArray*)&g0::outputs7, (TfLiteIntArray*)&g0::inputs7, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata7)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs8, (TfLiteIntArray*)&g0::outputs8, (TfLiteIntArray*)&g0::inputs8, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata8)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs9, (TfLiteIntArray*)&g0::outputs9, (TfLiteIntArray*)&g0::inputs9, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata9)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs10, (TfLiteIntArray*)&g0::outputs10, (TfLiteIntArray*)&g0::inputs10, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata10)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs11, (TfLiteIntArray*)&g0::outputs11, (TfLiteIntArray*)&g0::inputs11, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata11)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs12, (TfLiteIntArray*)&g0::outputs12, (TfLiteIntArray*)&g0::inputs12, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata12)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs13, (TfLiteIntArray*)&g0::outputs13, (TfLiteIntArray*)&g0::inputs13, nullptr, nullptr, nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs14, (TfLiteIntArray*)&g0::outputs14, (TfLiteIntArray*)&g0::inputs14, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata14)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs15, (TfLiteIntArray*)&g0::outputs15, (TfLiteIntArray*)&g0::inputs15, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata15)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs16, (TfLiteIntArray*)&g0::outputs16, (TfLiteIntArray*)&g0::inputs16, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata16)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs17, (TfLiteIntArray*)&g0::outputs17, (TfLiteIntArray*)&g0::inputs17, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata17)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs18, (TfLiteIntArray*)&g0::outputs18, (TfLiteIntArray*)&g0::inputs18, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata18)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs19, (TfLiteIntArray*)&g0::outputs19, (TfLiteIntArray*)&g0::inputs19, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata19)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs20, (TfLiteIntArray*)&g0::outputs20, (TfLiteIntArray*)&g0::inputs20, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata20)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs21, (TfLiteIntArray*)&g0::outputs21, (TfLiteIntArray*)&g0::inputs21, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata21)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs22, (TfLiteIntArray*)&g0::outputs22, (TfLiteIntArray*)&g0::inputs22, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata22)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs23, (TfLiteIntArray*)&g0::outputs23, (TfLiteIntArray*)&g0::inputs23, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata23)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs24, (TfLiteIntArray*)&g0::outputs24, (TfLiteIntArray*)&g0::inputs24, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata24)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs25, (TfLiteIntArray*)&g0::outputs25, (TfLiteIntArray*)&g0::inputs25, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata25)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs26, (TfLiteIntArray*)&g0::outputs26, (TfLiteIntArray*)&g0::inputs26, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata26)), nullptr, 0, },
{ (TfLiteIntArray*)&g0::inputs27, (TfLiteIntArray*)&g0::outputs27, (TfLiteIntArray*)&g0::inputs27, nullptr, const_cast<void*>(static_cast<const void*>(&g0::opdata27)), nullptr, 0, },
};
#endif

used_operators_e used_ops[] =
{OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_PAD, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_DEPTHWISE_CONV_2D, OP_CONV_2D, OP_ADD, OP_CONV_2D, OP_CONV_2D, OP_CONV_2D, OP_SOFTMAX, };


// Indices into tflTensors and tflNodes for subgraphs
const size_t tflTensors_subgraph_index[] = {0, 73, };
const size_t tflNodes_subgraph_index[] = {0, 28, };

// Input/output tensors
static const int in_tensor_indices[] = {
  0, 
};

static const int out_tensor_indices[] = {
  72, 
};


size_t current_subgraph_index = 0;

static void init_tflite_tensor(size_t i, TfLiteTensor *tensor) {
  tensor->type = tensorData[i].type;
  tensor->is_variable = false;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  tensor->allocation_type = tensorData[i].allocation_type;
#else
  tensor->allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
  tensor->bytes = tensorData[i].bytes;
  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  if(tensor->allocation_type == kTfLiteArenaRw){
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
      tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
  tensor->quantization = tensorData[i].quantization;
  if (tensor->quantization.type == kTfLiteAffineQuantization) {
    TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
    tensor->params.scale = quant->scale->data[0];
    tensor->params.zero_point = quant->zero_point->data[0];
  }

}

static void init_tflite_eval_tensor(int i, TfLiteEvalTensor *tensor) {

  tensor->type = tensorData[i].type;

  tensor->dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
  auto allocation_type = tensorData[i].allocation_type;
  if(allocation_type == kTfLiteArenaRw) {
    uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

    tensor->data.data =  start;
  }
  else {
    tensor->data.data = tensorData[i].data;
  }
#else
  tensor->data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
}

static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBufferImpl(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  uint32_t align_bytes = (bytes % 16) ? 16 - (bytes % 16) : 0;

  if (current_location - (bytes + align_bytes) < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  // align to the left aligned boundary of 16 bytes
  current_location -= 15; // for alignment
  current_location += 16 - ((uintptr_t)(current_location) & 15);

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}

typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;

static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArenaImpl(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBufferImpl(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBufferImpl(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static const uint16_t TENSOR_IX_UNUSED = 0x7FFF;

static void ResetTensors() {
  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    tflTensors[ix].index = TENSOR_IX_UNUSED;
  }
  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    tflEvalTensors[ix].index = TENSOR_IX_UNUSED;
  }
}

static TfLiteTensor* GetTensorImpl(const struct TfLiteContext* context,
                               int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_TENSOR_COUNT; ix++) {
    // already used? OK!
    if (tflTensors[ix].index == tensor_idx) {
      return &tflTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_tensor(tensor_idx, &tflTensors[ix].tensor);
      tflTensors[ix].index = tensor_idx;
      return &tflTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_TENSOR_COUNT (%d)\n", MAX_TFL_TENSOR_COUNT);
  return nullptr;
}

static TfLiteEvalTensor* GetEvalTensorImpl(const struct TfLiteContext* context,
                                       int tensor_idx) {

  tensor_idx = tflTensors_subgraph_index[current_subgraph_index] + tensor_idx;

  for (size_t ix = 0; ix < MAX_TFL_EVAL_COUNT; ix++) {
    // already used? OK!
    if (tflEvalTensors[ix].index == tensor_idx) {
      return &tflEvalTensors[ix].tensor;
    }
    // passed all the ones we've used, so end of the list?
    if (tflEvalTensors[ix].index == TENSOR_IX_UNUSED) {
      // init the tensor
      init_tflite_eval_tensor(tensor_idx, &tflEvalTensors[ix].tensor);
      tflEvalTensors[ix].index = tensor_idx;
      return &tflEvalTensors[ix].tensor;
    }
  }

  ei_printf("ERR: GetTensor called beyond MAX_TFL_EVAL_COUNT (%d)\n", (int)MAX_TFL_EVAL_COUNT);
  return nullptr;
}

class EonMicroContext : public MicroContext {
 public:
 
  EonMicroContext(): MicroContext(nullptr, nullptr, nullptr) { }

  void* AllocatePersistentBuffer(size_t bytes) {
    return AllocatePersistentBufferImpl(nullptr, bytes);
  }

  TfLiteStatus RequestScratchBufferInArena(size_t bytes,
                                           int* buffer_index) {
  return RequestScratchBufferInArenaImpl(nullptr, bytes, buffer_index);
  }

  void* GetScratchBuffer(int buffer_index) {
    return GetScratchBufferImpl(nullptr, buffer_index);
  }
 
  TfLiteTensor* AllocateTempTfLiteTensor(int tensor_index) {
    return GetTensorImpl(nullptr, tensor_index);
  }

  void DeallocateTempTfLiteTensor(TfLiteTensor* tensor) {
    return;
  }

  bool IsAllTempTfLiteTensorDeallocated() {
    return true;
  }

  TfLiteEvalTensor* GetEvalTensor(int tensor_index) {
    return GetEvalTensorImpl(nullptr, tensor_index);
  }

};


} // namespace

TfLiteStatus tflite_learn_6_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;

  EonMicroContext micro_context_;
  
  // Set microcontext as the context ptr
  ctx.impl_ = static_cast<void*>(&micro_context_);
  // Setup tflitecontext functions
  ctx.AllocatePersistentBuffer = &AllocatePersistentBufferImpl;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArenaImpl;
  ctx.GetScratchBuffer = &GetScratchBufferImpl;
  ctx.GetTensor = &GetTensorImpl;
  ctx.GetEvalTensor = &GetEvalTensorImpl;
  ctx.ReportError = &MicroContextReportOpError;

  ctx.tensors_size = 73;
  for (size_t i = 0; i < 73; ++i) {
    TfLiteTensor tensor;
    init_tflite_tensor(i, &tensor);
    if (tensor.allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tensor.data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }

  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }

  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_DEPTHWISE_CONV_2D] = Register_DEPTHWISE_CONV_2D();
  registrations[OP_ADD] = Register_ADD();
  registrations[OP_PAD] = Register_PAD();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].init) {
        tflNodes[i].user_data = registrations[used_ops[i]].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
      }
    }
  }
  current_subgraph_index = 0;

  for(size_t g = 0; g < 1; ++g) {
    current_subgraph_index = g;
    for(size_t i = tflNodes_subgraph_index[g]; i < tflNodes_subgraph_index[g+1]; ++i) {
      if (registrations[used_ops[i]].prepare) {
        ResetTensors();
        TfLiteStatus status = registrations[used_ops[i]].prepare(&ctx, &tflNodes[i]);
        if (status != kTfLiteOk) {
          return status;
        }
      }
    }
  }
  current_subgraph_index = 0;

  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_input(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(in_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_output(int index, TfLiteTensor *tensor) {
  init_tflite_tensor(out_tensor_indices[index], tensor);
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_invoke() {
  for (size_t i = 0; i < 28; ++i) {
    ResetTensors();

    TfLiteStatus status = registrations[used_ops[i]].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus tflite_learn_6_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
